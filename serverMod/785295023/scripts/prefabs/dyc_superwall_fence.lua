require "prefabutil" local _Dz2I = { } local _Cpfy = math.random() local function _85sL(_tj0d, _vMsw, _9adJ) if _tj0d < _vMsw then _tj0d = _vMsw elseif _tj0d > _9adJ then _tj0d = _9adJ end return _tj0d end local function _LTiV(_cGDN) if _cGDN % 0x1 >= 0.5 then return math.ceil(_cGDN) else return math.floor(_cGDN) end end local function _4N6X(_KRRi, _40cQ, _Nuo6) if not SuperWall.isSW or not GROUND then return false end local _d4nB = TheWorld.Map:GetTile(TheWorld.Map:GetTileCoordsAtPoint(_KRRi, _40cQ, _Nuo6)) if not _d4nB then return false end if _d4nB == GROUND.IMPASSABLE or _d4nB == GROUND.WATER_MANGROVE or _d4nB == GROUND.WATER_CORAL or _d4nB == GROUND.WATER_DEEP or _d4nB == GROUND.WATER_MEDIUM or _d4nB == GROUND.WATER_SHALLOW then return true else return false end end local function _S1lC(_vt6T) return _4N6X(_vt6T.Transform:GetWorldPosition()) end local function _guvB(_BORP) return SuperWall.isSW and (_BORP == "dyc_wall_sea" or _BORP == "dyc_wall_sea_item" or _BORP == "dyc_door_sea" or _BORP == "dyc_door_sea_item" ) end function IsWaterWall(_ndCN) return _guvB(_ndCN.prefab) end local function _4jCi(_8w5r, _FmRi, _sc5c) local _CDBr, y, z = _FmRi.x, _FmRi.y, _FmRi.z local _V8bJ = TheWorld.Map:CanDeployWallAtPoint(_FmRi, _8w5r) and (not _4N6X(_CDBr, y, z) or (_sc5c and _guvB(_sc5c) or IsWaterWall(_8w5r))) return _V8bJ end local _EKp9 = SuperWall.IsAuthorized local _NISa = SuperWall.Id2Player local _BKGJ = SuperWall.Player2Index local function _ycD9(_xOo4) local _Mmiy = Vector3(math.floor(_xOo4.x) + .5, 0x0, math.floor(_xOo4.z) + .5) return _Mmiy end local function _TOnT(_Ml26) if _Ml26.doorstate and _Ml26.components.workable.workleft > 0x0 then makeobstacle(_Ml26) else clearobstacle(_Ml26) end end local function _i2Ny(_h6N6, _DQQS) return math.floor((math.floor(_h6N6 + 0.5) / 0x2d) % 0x8) end local function _GvNz(_aC4g, _Ug7r) return _i2Ny(_aC4g, _Ug7r) * 0x2d end local function _C0q8(_v8xq) return _i2Ny(_v8xq.Transform:GetRotation()) % 0x2 == 0x0 end local function _RJAG(_yf2A) if _yf2A._isswingright ~= nil then return _yf2A._isswingright:value() end return _yf2A.isswingright == true end local function _arB5(_Gz2x) return _Gz2x._isopen ~= nil and _Gz2x._isopen:value() end local function _aXTk(_qVmb, _5w6q) return _5w6q..(_RJAG(_qVmb) and "right" or "" )..(_arB5(_qVmb) and "_open" or "" ) end local function _QPLE(_tAb6) return(_tAb6.dooranim or _tAb6).AnimState end local function _5hb4(_KDfC, _PbVc, _827H, _pn95, _xzKc) if _KDfC.wallAnimChildren then for _jLTv, _Q6Mf in pairs(_KDfC.wallAnimChildren) do _QPLE(_Q6Mf):SetMultColour(_PbVc, _827H, _pn95, _xzKc) end else _QPLE(_KDfC):SetMultColour(_PbVc, _827H, _pn95, _xzKc) end end local function _y5C2(_WYJX, _QTw4) if _WYJX.wallAnimChildren then for _K3rX, _Rdpf in pairs(_WYJX.wallAnimChildren) do _QPLE(_Rdpf):PlayAnimation(_QTw4) end else _QPLE(_WYJX):PlayAnimation(_QTw4) end end local function _AfIG(_H8V8, _TUVT, _yPNd) if _H8V8.wallAnimChildren then for _AfVA, _OmpN in pairs(_H8V8.wallAnimChildren) do _QPLE(_OmpN):PushAnimation(_TUVT, _yPNd) end else _QPLE(_H8V8):PushAnimation(_TUVT, _yPNd) end end local function _cPCp(_u6ON) local _QHPt = _u6ON.wallpercent if _QHPt >= 0x1 then _5hb4(_u6ON, 0x1, 0x1, 0x1, 0x1) _u6ON.wallcolor = {r = 0x1, g = 0x1, b = 0x1, a = 0x1, } elseif _QHPt >= 0.75 then _5hb4(_u6ON, 0x1, 0x0, 0x0, 0x1) _u6ON.wallcolor = {r = 0x1, g = 0x0, b = 0x0, a = 0x1, } elseif _QHPt >= 0.5 then _5hb4(_u6ON, 0x0, 0x1, 0x0, 0x1) _u6ON.wallcolor = {r = 0x0, g = 0x1, b = 0x0, a = 0x1, } elseif _QHPt >= 0.25 then _5hb4(_u6ON, 0x0, 0x0, 0x1, 0x1) _u6ON.wallcolor = {r = 0x0, g = 0x0, b = 0x1, a = 0x1, } elseif _QHPt >= 0x0 then _5hb4(_u6ON, 0x0, 0x0, 0x0, 0x1) _u6ON.wallcolor = {r = 0x0, g = 0x0, b = 0x0, a = 0x1, } else _5hb4(_u6ON, 0x1, 0x1, 0x1, 0x1) _u6ON.wallcolor = {r = 0x1, g = 0x1, b = 0x1, a = 0x1, } end end local function _w5vX(_dLd5, _8NG4) local _qowM = _RJAG(_dLd5) and - 0x1 or 0x1 local _rZBn = _dLd5.Transform:GetRotation() * DEGREES local _Z5D1 = _rZBn + _qowM * _8NG4 * DEGREES local _GGOX = _qowM * (_C0q8(_dLd5) and .5 or .707) return _GGOX * (math.sin(_Z5D1) - math.sin(_rZBn)), 0x0, _GGOX * (math.cos(_Z5D1) - math.cos(_rZBn)) end local function _gic0(_atQE) if _atQE.dooranim ~= nil and _atQE.dooranim.AnimState.SetSortWorldOffset ~= nil and _atQE._isopen ~= nil then if _atQE._isopen:value() then _atQE.dooranim.AnimState:SetSortWorldOffset(_w5vX(_atQE, 0x64)) else _atQE.dooranim.AnimState:SetSortWorldOffset(0x0, 0x0, 0x0) end end if _atQE.wallAnimChildren ~= nil and _atQE._isopen ~= nil then if _atQE._isopen:value() then _y5C2(_atQE, "open" ) _AfIG(_atQE, "opened" ) else _y5C2(_atQE, "close" ) _AfIG(_atQE, "idle" ) end end end local function _T8xc(_juPz) _juPz:ListenForEvent( "doorstatedirty" , _gic0) _gic0(_juPz) end local function _jH8f(_Jbw1) local _fBEB = _Jbw1.entity:GetParent() if _fBEB ~= nil then _fBEB.highlightforward = _Jbw1 _fBEB.dooranim = _Jbw1 end end local function _CDqH(_6pZZ, _KP47) if _6pZZ._isswingright ~= nil then _6pZZ._isswingright:set(_KP47) else _6pZZ.isswingright = _KP47 end _gic0(_6pZZ) end local function _H12s(_ByeF) local _pdS8, y, z = _ByeF.Transform:GetWorldPosition() local _HIoe = _ByeF.Transform:GetRotation() local _VlVI = _RJAG(_ByeF) local _Ypcq = _C0q8(_ByeF) and 0x1 or 1.4 local _R0g3 = - math.sin(_HIoe / RADIANS) * _Ypcq local _EZYE = math.cos(_HIoe / RADIANS) * _Ypcq _R0g3 = _pdS8 + (_VlVI and _R0g3 or - _R0g3) _EZYE = z + (_VlVI and - _EZYE or _EZYE) local _NbHR = TheSim:FindEntities(_R0g3, 0x0, _EZYE, 0.25, { "door" })[0x1] if _NbHR then local _idzR = _VlVI ~= _RJAG(_NbHR) local _w9my = _ByeF.Transform:GetRotation() ~= _NbHR.Transform:GetRotation() return(_idzR ~= _w9my) and _NbHR or nil end return nil end local function _Us9x(_bVdz) local _4vis, y, z = _bVdz.Transform:GetWorldPosition() return TheSim:FindEntities(_4vis, 0x0, z, 1.5, { "wall" }) end local function _ZMLL(_slaz, _povF) if _slaz.dooranim ~= nil then _slaz.dooranim.Transform:SetPosition(_povF, 0x0, 0x0) end end local function _bG5S(_WdmZ) _ZMLL(_WdmZ, _WdmZ.offsetdoor and 0.45 or 0x0) end local function _dNFz(_0S1S, _VzJr) if _0S1S._rotation ~= nil then _VzJr = _0S1S._rotation:value() end if _VzJr ~= nil then if _0S1S.wallAnimChildren then for _3p1G, _CXzl in pairs(_0S1S.wallAnimChildren) do local _8WjG = _LTiV((math.floor(_VzJr + 0.5) / 0x2d) % 0x2) == 0x1 and 1.414213 or 0x1 _CXzl.Transform:SetPosition(_CXzl.animOffset.z * _8WjG, 0x0, _CXzl.animOffset.x * _8WjG) end end end end local function _6DwE(_0vN0) if _0vN0._workleft ~= nil then _0vN0.workleft = _0vN0._workleft:value() if _0vN0.wallpercent > _0vN0.workleft / _0vN0.iniworkleft then _0vN0.wallpercent = _0vN0.workleft / _0vN0.iniworkleft end if _0vN0.wallpercent < 0x0 then _0vN0.wallpercent = 0x0 end _cPCp(_0vN0) end end local function _jspm(_gmUK) if _gmUK._hit ~= nil then if not _gmUK.hitanim then _y5C2(_gmUK, _aXTk(_gmUK, _gmUK.hitanim or "hit" )) _AfIG(_gmUK, _aXTk(_gmUK, "idle" ), false) elseif _gmUK.hitanim == "onlywhenclosed" and not _arB5(_gmUK) then _y5C2(_gmUK, _aXTk(_gmUK, "hit" )) _AfIG(_gmUK, _aXTk(_gmUK, "idle" ), false) end end end local function _tsN0(_OdMV, _Oyq8) _Oyq8 = _GvNz(_Oyq8, _OdMV.isdoor and not _OdMV.isUpDownDoor) _OdMV.Transform:SetRotation(_Oyq8) if _OdMV.dooranim ~= nil then _OdMV.dooranim.Transform:SetRotation(0x0) end if _OdMV.builds.narrow then if _C0q8(_OdMV) then if not _OdMV.bank_narrow_set then _OdMV.bank_narrow_set = true _OdMV.bank_wide_set = nil _QPLE(_OdMV):SetBank(_OdMV.builds.narrow) end else if not _OdMV.bank_wide_set then _OdMV.bank_wide_set = true _OdMV.bank_narrow_set = nil _QPLE(_OdMV):SetBank(_OdMV.builds.wide) end end if _OdMV.isdoor and not _OdMV.isUpDownDoor then _bG5S(_OdMV) end end if _OdMV._rotation ~= nil then _OdMV._rotation:set(_Oyq8) _dNFz(_OdMV) else _dNFz(_OdMV, _Oyq8) end end local function _Oa0q(_E9Cw, _vx2A) if _E9Cw == nil or not _E9Cw.isdoor then return false end local _VTiK, y, z = _E9Cw.Transform:GetWorldPosition() local _aPzp = _E9Cw.Transform:GetRotation() local _cY1Q = - math.sin(_aPzp / RADIANS) * 1.2 local _jt13 = math.cos(_aPzp / RADIANS) * 1.2 local _1KZB = TheSim:FindEntities(_VTiK + _cY1Q, 0x0, z - _jt13, 0.25, { "wall" }, { "alignwall" }) if #_1KZB == 0x0 then _1KZB = TheSim:FindEntities(_VTiK - _cY1Q, 0x0, z + _jt13, 0.25, { "wall" }, { "alignwall" }) end return #_1KZB > 0x0 end local function _eOli(_C8Rh, _Tyo6) if _C8Rh == nil or (not _C8Rh.isdoor or _C8Rh.isUpDownDoor) then return end if not _C0q8(_C8Rh) then _C8Rh.offsetdoor = false _bG5S(_C8Rh) return end local _zme5 = _Oa0q(_C8Rh, _Tyo6) local _5bV9 = _H12s(_C8Rh) if _5bV9 and _zme5 == false then _zme5 = _Oa0q(_5bV9) end if _C8Rh.offsetdoor ~= _zme5 then _C8Rh.offsetdoor = _zme5 _bG5S(_C8Rh) end end local function _9a5Z(_jjhl, _hIFU, _HBwh) local _H9hb = _Us9x(_jjhl) if _HBwh ~= nil then _H9hb = {} end if _hIFU ~= nil then if _jjhl.isdoor and not _jjhl.isUpDownDoor then local _8sGO = _H9hb[0x2] if _8sGO ~= nil then if _8sGO.isdoor and not _8sGO.isUpDownDoor then _CDqH(_jjhl, not _RJAG(_8sGO)) else local _K4r6, y, z = _jjhl.Transform:GetWorldPosition() local _o58Z, y1, z1 = _8sGO.Transform:GetWorldPosition() local _Z0Ce = math.atan2(_K4r6 - _o58Z, z - z1) * RADIANS _CDqH(_jjhl, math.abs(_i2Ny(_hIFU, true) - _i2Ny(_Z0Ce, true)) == 0x4) end else if _HBwh ~= nil then _CDqH(_jjhl, _HBwh) end end end _tsN0(_jjhl, _hIFU) _eOli(_jjhl, _H9hb) else local _Tw8s = TheSim:IsKeyDown(KEY_ALT) local _1G9k = _jjhl.Transform:GetRotation() local _2Dy7 = _H9hb[0x1] or nil if _2Dy7 ~= nil then local _07y5, y, z = _jjhl.Transform:GetWorldPosition() local _4UaQ, y1, z1 = _2Dy7.Transform:GetWorldPosition() local _Eqpo = math.atan2(_07y5 - _4UaQ, z - z1) * RADIANS local _2k6m = _2Dy7.Transform:GetRotation() local _KP5R = _2Dy7:HasTag( "alignwall" ) local _9rxk = not _jjhl.isdoor and _KP5R and math.abs(math.sin((_Eqpo - _2k6m) / RADIANS) * RADIANS) < 0x1 local _aZkB = _GvNz(_9rxk and _2k6m or _Eqpo, _jjhl.isdoor and not _jjhl.isUpDownDoor) _aZkB = not _Tw8s and _aZkB or _1G9k if _jjhl.isdoor and not _jjhl.isUpDownDoor then if Vector3(_07y5 - _4UaQ, 0x0, z - z1):Dot(TheCamera:GetRightVec()) < 0x0 then _aZkB = _aZkB + 0xb4 _aZkB = not _Tw8s and _aZkB or _1G9k end if _2Dy7.isdoor and not _2Dy7.isUpDownDoor then if _i2Ny(_2Dy7.Transform:GetRotation(), false) == _i2Ny(_aZkB, false) then _aZkB = _2Dy7.Transform:GetRotation() _aZkB = not _Tw8s and _aZkB or _1G9k end _CDqH(_jjhl, not _RJAG(_2Dy7)) else _CDqH(_jjhl, math.abs(_i2Ny(_aZkB, true) - _i2Ny(_Eqpo, true)) == 0x4) end end _tsN0(_jjhl, _aZkB) _eOli(_jjhl, _H9hb) else if _jjhl.isdoor and not _jjhl.isUpDownDoor then _CDqH(_jjhl, false) end _tsN0(_jjhl, _1G9k) end end _y5C2(_jjhl, _aXTk(_jjhl, "idle" )) end local function _svWg(_Ftfr) if _Ftfr._ispathfinding:value() then if _Ftfr._pfpos == nil then _Ftfr._pfpos = _Ftfr:GetPosition() TheWorld.Pathfinder:AddWall(_Ftfr._pfpos:Get()) end elseif _Ftfr._pfpos ~= nil then TheWorld.Pathfinder:RemoveWall(_Ftfr._pfpos:Get()) _Ftfr._pfpos = nil end end local function _Hc5f(_ZVJC) _ZVJC:ListenForEvent( "onispathfindingdirty" , _svWg) _svWg(_ZVJC) end local function _hUAQ(_KXJm) _KXJm.Physics:SetActive(true) _KXJm._ispathfinding:set(true) end local function _IR8I(_Jn4f) _Jn4f.Physics:SetActive(false) _Jn4f._ispathfinding:set(false) end local function _JJyj(_EiSI) _IR8I(_EiSI) _svWg(_EiSI) if _EiSI.doortask then _EiSI.doortask:Cancel() end if _EiSI.doortask2 then _EiSI.doortask2:Cancel() end if _EiSI["dyccheckpostask".._Cpfy] then _EiSI["dyccheckpostask".._Cpfy]:Cancel() end end local function _fOPI() return false end local function _U01o(_S5dq, _yE0F) if not _S5dq["dycislastworkvalid".._Cpfy] then return end if _S5dq.loot then local _VJIY = _S5dq.lootnum for _vHSt = 0x1, _VJIY do _S5dq.components.lootdropper:SpawnLootPrefab(_S5dq.loot) end end SpawnPrefab( "collapse_small" ).Transform:SetPosition(_S5dq.Transform:GetWorldPosition()) if _S5dq.destroysound then _S5dq.SoundEmitter:PlaySound(_S5dq.destroysound) end _S5dq:Remove() end local function _i0Fp(_xA88, _b2K5, _ibCR) if TUNING.DYC_SUPERWALL_HEALTHMUL < 0x0 then _xA88.components.health.currenthealth = _xA88.components.health.maxhealth _ibCR = 0x1 end if(_ibCR <= 0x0) then _xA88:DYCDestroyWall() return end end local function _0T0O(_jNQf) if _jNQf.wallpercent > _jNQf.components.workable.workleft / _jNQf.iniworkleft then _jNQf.wallpercent = _jNQf.components.workable.workleft / _jNQf.iniworkleft end if _jNQf.wallpercent < 0x0 then _jNQf.wallpercent = 0x0 end if not _jNQf.hitanim then _y5C2(_jNQf, _aXTk(_jNQf, _jNQf.hitanim or "hit" )) _AfIG(_jNQf, _aXTk(_jNQf, "idle" ), false) elseif _jNQf.hitanim == "onlywhenclosed" and not _arB5(_jNQf) then _y5C2(_jNQf, _aXTk(_jNQf, "hit" )) _AfIG(_jNQf, _aXTk(_jNQf, "idle" ), false) end _cPCp(_jNQf) if _jNQf._workleft ~= nil then _jNQf._workleft:set(_jNQf.components.workable.workleft) end if _jNQf._hit ~= nil then _jNQf._hit:set(not _jNQf._hit:value()) end end local function _S2x5(_J4mI, _6vA4, _vL1s) local _7fpF = false if _6vA4.components.inventory then for _35xT, _h07M in pairs(_6vA4.components.inventory.equipslots) do if _h07M.components.tool and _h07M.components.tool:CanDoAction(ACTIONS.HAMMER) then _7fpF = true if _h07M.components.finiteuses then _h07M.components.finiteuses:Use( - 0x1) end break end end end local _QdjE = false if _EKp9(_J4mI, _6vA4) then _QdjE = true end if TUNING.DYC_SUPERWALL_BOSSRES == true then if not _7fpF or not _QdjE then _J4mI["dycislastworkvalid".._Cpfy] = false _J4mI.components.workable.destroyed = false _J4mI.components.workable.workleft = _J4mI.workleft else _J4mI["dycislastworkvalid".._Cpfy] = true _J4mI.workleft = _J4mI.workleft - 0.25 * _J4mI.iniworkleft _J4mI.components.workable.workleft = _J4mI.workleft _0T0O(_J4mI) end else if _7fpF and not _QdjE then _J4mI["dycislastworkvalid".._Cpfy] = false _J4mI.components.workable.destroyed = false _J4mI.components.workable.workleft = _J4mI.workleft else _J4mI["dycislastworkvalid".._Cpfy] = true if not _7fpF then _J4mI.workleft = _J4mI.components.workable.workleft else _J4mI.workleft = _J4mI.workleft - 0.25 * _J4mI.iniworkleft _J4mI.components.workable.workleft = _J4mI.workleft end _0T0O(_J4mI) end end if _7fpF and not _QdjE and _6vA4.components.talker then local _jAHE = "" local _cdyg = "" if _J4mI.isdoor then _cdyg = TUNING.DYC_SUPERWALL_STRINGS.str1_2 else _cdyg = TUNING.DYC_SUPERWALL_STRINGS.str0_2 end local _Qc8W = _NISa(_J4mI.dyc_ownerid) if _Qc8W ~= nil then if _Qc8W.components.talker then _Qc8W.components.talker:Say(_6vA4.name..TUNING.DYC_SUPERWALL_STRINGS.str13.._cdyg..TUNING.DYC_SUPERWALL_STRINGS.str6, 0x4) end _jAHE = TUNING.DYC_SUPERWALL_STRINGS.str3.._cdyg..TUNING.DYC_SUPERWALL_STRINGS.str5.._Qc8W.name..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n" end _jAHE = _jAHE..TUNING.DYC_SUPERWALL_STRINGS.str12 _6vA4.components.talker:Say(_jAHE, 0x4) end end local function _LIwp(_2HRe, _yklX, _FOXS) _0T0O(_2HRe) if TUNING.DYC_SUPERWALL_REBOUNDDAMAGE > 0x0 and _yklX.components.combat then _yklX.components.combat:GetAttacked(_2HRe, TUNING.DYC_SUPERWALL_REBOUNDDAMAGE, nil) end end local function _7J12(_l5U4, _ewp4) _l5U4._isopen:set(_ewp4) _gic0(_l5U4) end local function _QjZ0(_6KhJ, _ESTi) if _6KhJ == nil then return end _6KhJ.doorstate = false _7J12(_6KhJ, true) _IR8I(_6KhJ) if not _ESTi then _6KhJ.SoundEmitter:PlaySound( "dontstarve/common/together/gate/open" ) end if _6KhJ.isUpDownDoor then _y5C2(_6KhJ, "open" ) _AfIG(_6KhJ, "opened" ) else _QPLE(_6KhJ):PlayAnimation(_aXTk(_6KhJ, "idle" )) end end local function _wfg8(_pU9y, _pPjg) if _pU9y == nil then return end _pU9y.doorstate = true _7J12(_pU9y, false) _hUAQ(_pU9y) if not _pPjg then _pU9y.SoundEmitter:PlaySound( "dontstarve/common/together/gate/close" ) end if _pU9y.isUpDownDoor then _y5C2(_pU9y, "close" ) _AfIG(_pU9y, "idle" ) else _QPLE(_pU9y):PlayAnimation(_aXTk(_pU9y, "idle" )) end end local function _lfKQ(_XBkF, _sWxo) if _XBkF == nil then return end _XBkF.islocked = _sWxo if _XBkF.islocked and not _XBkF.doorstate then _wfg8(_XBkF) end end local function _vu04(_Gooo, _0SGg) _Gooo.components.activatable.inactive = true if _0SGg == nil then return end local _ZVPt = _EKp9(_Gooo, _0SGg) if _ZVPt then local _x1Pb = not _Gooo.islocked _lfKQ(_Gooo, _x1Pb) local _aTP0 = _H12s(_Gooo) if _aTP0 and _EKp9(_aTP0, _0SGg) then _lfKQ(_aTP0, _x1Pb) end end if _0SGg.components.talker then local _aBVc = "" local _Hn0J = "" if _Gooo.isdoor then _Hn0J = TUNING.DYC_SUPERWALL_STRINGS.str1_2 else _Hn0J = TUNING.DYC_SUPERWALL_STRINGS.str0_2 end if not _ZVPt then local _R1N4 = _NISa(_Gooo.dyc_ownerid) if _R1N4 ~= nil then if _R1N4.components.talker then _R1N4.components.talker:Say(_0SGg.name..TUNING.DYC_SUPERWALL_STRINGS.str13_2.._Hn0J..TUNING.DYC_SUPERWALL_STRINGS.str6, 0x4) end _aBVc = TUNING.DYC_SUPERWALL_STRINGS.str3.._Hn0J..TUNING.DYC_SUPERWALL_STRINGS.str5.._R1N4.name..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n" end _aBVc = _aBVc..TUNING.DYC_SUPERWALL_STRINGS.str12 _0SGg.components.talker:Say(_aBVc, 0x4) else if _Gooo.islocked then _aBVc = _aBVc..TUNING.DYC_SUPERWALL_STRINGS.str27 else _aBVc = _aBVc..TUNING.DYC_SUPERWALL_STRINGS.str28 end _0SGg.components.talker:Say(_aBVc, 0x4) end end end local function _3f1a(_B4qD) return _arB5(_B4qD) and "CLOSE" or "OPEN" end local function _JD0b(_W1iA, _hwoL) local _P93e = GetDescription(_hwoL, _W1iA, _W1iA.components.inspectable:GetStatus(_hwoL)) if TUNING.DYC_SUPERWALL_OWNERSHIP == 0x0 then return _P93e end local _DlQM = _W1iA.dyc_ownerid local _16z7 = "" if _W1iA.isdoor then _16z7 = TUNING.DYC_SUPERWALL_STRINGS.str1_2 else _16z7 = TUNING.DYC_SUPERWALL_STRINGS.str0_2 end if _DlQM ~= nil then local _hVAs = _NISa(_DlQM) if _hVAs == nil then if not _EKp9(_W1iA, _hwoL) then return TUNING.DYC_SUPERWALL_STRINGS.str2 else return TUNING.DYC_SUPERWALL_STRINGS.str2.."\n"..TUNING.DYC_SUPERWALL_STRINGS.str14..TUNING.DYC_SUPERWALL_STRINGS.str15 end else if _hVAs == _hwoL then return TUNING.DYC_SUPERWALL_STRINGS.str3.._16z7..TUNING.DYC_SUPERWALL_STRINGS.str4.."\n".._P93e else if not _EKp9(_W1iA, _hwoL) then if _W1iA.dyc_lastclickuid ~= _hwoL.userid then _W1iA.dyc_clickcount = 0x0 end _W1iA.dyc_lastclickuid = _hwoL.userid if _W1iA.dyc_clickcount == nil then _W1iA.dyc_clickcount = 0x1 else _W1iA.dyc_clickcount = _W1iA.dyc_clickcount + 0x1 if _W1iA.dyc_clickcount > 0x3 then _W1iA.dyc_clickcount = 0x0 if _hVAs.components.talker then _hVAs.components.talker:Say(_hwoL.name..TUNING.DYC_SUPERWALL_STRINGS.str20.._16z7..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n"..TUNING.DYC_SUPERWALL_STRINGS.str21.._BKGJ(_hwoL)..TUNING.DYC_SUPERWALL_STRINGS.str22, 0x4) end end end return TUNING.DYC_SUPERWALL_STRINGS.str3.._16z7..TUNING.DYC_SUPERWALL_STRINGS.str5.._hVAs.name..TUNING.DYC_SUPERWALL_STRINGS.str6 else return TUNING.DYC_SUPERWALL_STRINGS.str3.._16z7..TUNING.DYC_SUPERWALL_STRINGS.str5.._hVAs.name..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n"..TUNING.DYC_SUPERWALL_STRINGS.str15.."\n".._P93e end end end end return _P93e end local function _9OKf(_DmrG, _KTqQ) local _fACu = _i2Ny(_DmrG.Transform:GetRotation(), _DmrG.isdoor and not _DmrG.isUpDownDoor) _KTqQ.rot = _fACu > 0x0 and _fACu or nil _KTqQ.offsetdoor = _DmrG.offsetdoor _KTqQ.swingright = _DmrG._isswingright ~= nil and _DmrG._isswingright:value() or nil _KTqQ.isopen = _DmrG._isopen ~= nil and _DmrG._isopen:value() or nil if _DmrG.dyc_ownerid ~= nil then _KTqQ.dyc_ownerid = _DmrG.dyc_ownerid end if _DmrG.islocked ~= nil then _KTqQ.islocked = _DmrG.islocked end end local function _Ncp3(_lWHp, _oNLN) if _oNLN ~= nil then _lWHp.offsetdoor = _oNLN.offsetdoor if _lWHp._isswingright ~= nil then _CDqH(_lWHp, _oNLN.swingright or (_oNLN.doorpairside == 0x2)) end local _e34b = 0x0 if _oNLN.rotation ~= nil then _e34b = _oNLN.rotation - 0x5a elseif _oNLN.rot ~= nil then _e34b = _oNLN.rot * 0x2d end _tsN0(_lWHp, _e34b) if _oNLN.isopen then _QjZ0(_lWHp, true) elseif _lWHp._isswingright ~= nil and _lWHp._isswingright:value() then _y5C2(_lWHp, _aXTk(_lWHp, "idle" )) end if _oNLN.dyc_ownerid ~= nil then _lWHp.dyc_ownerid = _oNLN.dyc_ownerid end if _oNLN.islocked ~= nil then _lWHp.islocked = _oNLN.islocked end end if _lWHp.components.workable.workleft < 0.25 * _lWHp.iniworkleft then _lWHp.components.workable.workleft = _lWHp.iniworkleft end _lWHp.workleft = _lWHp.components.workable.workleft _lWHp.wallpercent = _lWHp.components.workable.workleft / _lWHp.iniworkleft _cPCp(_lWHp) if _lWHp._workleft ~= nil then _lWHp._workleft:set(_lWHp.components.workable.workleft) end end local function _A0AD(_WjiD) local _SwET = false local _59GB = Vector3(_WjiD.Transform:GetWorldPosition()) for _Eeuf, _FGgn in pairs(AllPlayers) do local _hu1Z = Vector3(_FGgn.Transform:GetWorldPosition()) local _KNCR = _hu1Z:Dist(_59GB) if _KNCR < TUNING.DYC_SUPERWALL_DOORDETECTRANGE and _EKp9(_WjiD, _FGgn) then _SwET = true break end end if TUNING.DYC_SUPERWALL_COMPANION == true and TheWorld.dyc_superwall_companions ~= nil then for _Zopo, _98IE in pairs(TheWorld.dyc_superwall_companions) do if not _98IE:IsValid() then table.remove(TheWorld.dyc_superwall_companions, _Zopo) else if _98IE.components.follower and _98IE.components.follower.leader and _98IE.components.follower.leader.components.inventoryitem and _98IE.components.follower.leader.components.inventoryitem.owner then local _3WkY = _98IE.components.follower.leader.components.inventoryitem.owner if _EKp9(_WjiD, _3WkY) then local _sYto = Vector3(_98IE.Transform:GetWorldPosition()) local _hkja = _sYto:Dist(_59GB) if _hkja < TUNING.DYC_SUPERWALL_DOORDETECTRANGE then _SwET = true break end else if _3WkY.components.container and _3WkY.components.inventoryitem then local _IZF4 = _3WkY.components.inventoryitem.owner if _IZF4 and _EKp9(_WjiD, _IZF4) then local _UnwB = Vector3(_98IE.Transform:GetWorldPosition()) local _rt2f = _UnwB:Dist(_59GB) if _rt2f < TUNING.DYC_SUPERWALL_DOORDETECTRANGE then _SwET = true break end end end end elseif _98IE.components.follower and _98IE.components.follower.leader and _98IE.components.follower.leader:HasTag( "player" ) then local _4W3Q = _98IE.components.follower.leader if _EKp9(_WjiD, _4W3Q) then local _UsCF = Vector3(_98IE.Transform:GetWorldPosition()) local _F0lT = _UsCF:Dist(_59GB) if _F0lT < TUNING.DYC_SUPERWALL_DOORDETECTRANGE then _SwET = true break end end end end end end if _SwET then _WjiD.doorchanging = - 0x1 else _WjiD.doorchanging = 0x1 end if not _WjiD.islocked then if _WjiD.doorchanging < 0x0 and _WjiD.doorstate then _QjZ0(_WjiD) elseif _WjiD.doorchanging > 0x0 and not _WjiD.doorstate then _wfg8(_WjiD) end end end local function _vs4s(_bNSA, _ECja) local _TvEV = CreateEntity() _TvEV.entity:AddTransform() _TvEV.entity:AddAnimState() _TvEV.AnimState:SetBank(_bNSA.builds.wide or _bNSA.builds.onefaced) _TvEV.AnimState:SetBuild((_bNSA.builds.dyc and "dyc_" or "" )..(_bNSA.builds.wide or _bNSA.builds.onefaced)) _TvEV.AnimState:PlayAnimation( "idle" ) _TvEV.entity:SetParent(_bNSA.entity) if not _bNSA.wallAnimChildren then _bNSA.wallAnimChildren = {} end table.insert(_bNSA.wallAnimChildren, _TvEV) _TvEV:AddTag( "FX" ) _TvEV:AddTag( "nointerpolate" ) MakeSnowCoveredPristine(_TvEV) _TvEV.entity:SetPristine() _TvEV.persists = false _TvEV.animOffset = _ECja return _TvEV end local function _MgmK(_3f3G) _vs4s(_3f3G, {x = - 0.25, y = 0x0, z = 0x0}) _vs4s(_3f3G, {x = 0.25, y = 0x0, z = 0x0}) end local function _4MEY(_ROES, _NWIB, _tdAO, _KCLC) local _N37y, custom_wall_prefabs if _tdAO and not _NWIB.updowndoor then custom_wall_prefabs = {_ROES.."_anim" } for _XR2y, _NKZq in ipairs(_Dz2I) do table.insert(custom_wall_prefabs, _NKZq) end else _N37y = { } if _NWIB.dyc or _NWIB.loadasset then if _NWIB.onefaced then table.insert(_N37y, Asset( "ANIM" , "anim/"..(_NWIB.dyc and "dyc_" or "" ).._NWIB.onefaced..".zip" )) end if _NWIB.wide then table.insert(_N37y, Asset( "ANIM" , "anim/"..(_NWIB.dyc and "dyc_" or "" ).._NWIB.wide..".zip" )) end if _NWIB.narrow then table.insert(_N37y, Asset( "ANIM" , "anim/"..(_NWIB.dyc and "dyc_" or "" ).._NWIB.narrow..".zip" )) end end end local function _yyyz() local _i3SZ = CreateEntity() _i3SZ.entity:AddTransform() _i3SZ.entity:AddAnimState() _i3SZ.entity:AddSoundEmitter() _i3SZ.entity:AddNetwork() if not _NWIB.onefaced then _i3SZ.Transform:SetEightFaced() end MakeObstaclePhysics(_i3SZ, .5) _i3SZ.Physics:SetDontRemoveOnSleep(true) _i3SZ:AddTag( "wall" ) _i3SZ:AddTag( "superwall" ) _i3SZ:AddTag( "alignwall" ) _i3SZ:AddTag( "noauradamage" ) _i3SZ:AddTag( "nointerpolate" ) _i3SZ:AddTag( "floodblocker" ) if TUNING.DYC_SUPERWALL_MINIMAPICON then _i3SZ.entity:AddMiniMapEntity() _i3SZ.MiniMapEntity:SetPriority( - 0x1) if _tdAO then _i3SZ.MiniMapEntity:SetIcon(_NWIB.minimap or "minimap_fence_gate.tex" ) else _i3SZ.MiniMapEntity:SetIcon(_NWIB.minimap or "minimap_fence.tex" ) end end _i3SZ.doorstate = true _i3SZ.doorchanging = 0x1 _i3SZ.iniworkleft = 0x4 _i3SZ.workleft = _i3SZ.iniworkleft _i3SZ.wallpercent = 0x1 _i3SZ.loot = _NWIB.loot or (_tdAO and "log" ) or "twigs" _i3SZ.lootnum = _NWIB.lootnum or (_tdAO and 0x2) or 0x1 _i3SZ.destroysound = "dontstarve/common/destroy_wood" _i3SZ["dycislastworkvalid".._Cpfy] = false _i3SZ.islocked = false _i3SZ.builds = _NWIB _i3SZ._rotation = net_float(_i3SZ.GUID, _ROES.."._rotation" , "fencerotationdirty" ) _i3SZ._hit = net_bool(_i3SZ.GUID, _ROES.."._hit" , "fencegethitevent" ) _i3SZ._workleft = net_int(_i3SZ.GUID, _ROES.."._workleft" , "fenceworkleftdirty" ) if _tdAO then _i3SZ.isdoor = true _i3SZ:AddTag( "door" ) _i3SZ._isopen = net_bool(_i3SZ.GUID, _ROES.."._open" , "doorstatedirty" ) _i3SZ._isswingright = net_bool(_i3SZ.GUID, _ROES.."._swingright" , "doorstatedirty" ) _i3SZ.GetActivateVerb = _3f1a else if _NWIB.onefaced then _i3SZ.AnimState:SetBank(_NWIB.onefaced) _i3SZ.AnimState:SetBuild((_NWIB.dyc and "dyc_" or "" ).._NWIB.onefaced) else _i3SZ.AnimState:SetBank(_NWIB.wide) _i3SZ.AnimState:SetBuild((_NWIB.dyc and "dyc_" or "" ).._NWIB.wide) end _i3SZ.AnimState:PlayAnimation(_NWIB.hideanim and "" or "idle" ) MakeSnowCoveredPristine(_i3SZ) end if _NWIB.onefaced then _i3SZ.isOneFaced = true end if _NWIB.hitanim then _i3SZ.hitanim = _NWIB.hitanim end if _NWIB.updowndoor then _i3SZ.isUpDownDoor = true end _i3SZ._pfpos = nil _i3SZ._ispathfinding = net_bool(_i3SZ.GUID, "_ispathfinding" , "onispathfindingdirty" ) _hUAQ(_i3SZ) _i3SZ:DoTaskInTime(0x0, _Hc5f) _i3SZ.OnRemoveEntity = _JJyj if _KCLC then _KCLC(_i3SZ) end _i3SZ.entity:SetPristine() if not TheWorld.ismastersim then if _tdAO then _i3SZ:DoTaskInTime(0x0, _T8xc) end _i3SZ:DoTaskInTime(0x0, function() _i3SZ:ListenForEvent( "fencerotationdirty" , _dNFz) _dNFz(_i3SZ) _i3SZ:ListenForEvent( "fenceworkleftdirty" , _6DwE) _6DwE(_i3SZ) _i3SZ:ListenForEvent( "fencegethitevent" , _jspm) end) return _i3SZ end _i3SZ:DoTaskInTime(FRAMES, function() local _7Aw6, y, z = _i3SZ:GetPosition():Get() if _7Aw6 == 0x0 and y == 0x0 and z == 0x0 and _i3SZ.dyc_ownerid == nil then _i3SZ:Remove() end end) if _tdAO and not _i3SZ.isUpDownDoor then _i3SZ.dooranim = SpawnPrefab(_ROES.."_anim" ) _i3SZ.dooranim.entity:SetParent(_i3SZ.entity) _i3SZ.highlightforward = _i3SZ.dooranim end _i3SZ:AddComponent( "inspectable" ) _i3SZ.components.inspectable.descriptionfn = _JD0b _i3SZ:AddComponent( "lootdropper" ) _i3SZ.components.lootdropper:SetLoot(_NWIB.loot ~= nil and {_NWIB.loot} or (_tdAO and { "log" , "log" }) or { "twigs" }) _i3SZ:AddComponent( "workable" ) _i3SZ.components.workable:SetWorkAction(ACTIONS.HAMMER) _i3SZ.components.workable:SetWorkLeft(_i3SZ.iniworkleft) _i3SZ.components.workable:SetOnFinishCallback(_U01o) _i3SZ.components.workable:SetOnWorkCallback(_S2x5) _i3SZ.components.workable.savestate = true _i3SZ:AddComponent( "combat" ) _i3SZ.components.combat:SetKeepTargetFunction(_fOPI) _i3SZ.components.combat.onhitfn = _LIwp _i3SZ:AddComponent( "health" ) if _tdAO then if TUNING.DYC_SUPERWALL_HEALTHMUL > 0x0 then _i3SZ.components.health:SetMaxHealth((_NWIB.health or 0xc8) * TUNING.DYC_SUPERWALL_HEALTHMUL) _i3SZ.components.health.currenthealth = (_NWIB.health or 0xc8) * TUNING.DYC_SUPERWALL_HEALTHMUL else _i3SZ.components.health:SetMaxHealth(0x3e8) _i3SZ.components.health.currenthealth = 0x3e8 end else if TUNING.DYC_SUPERWALL_HEALTHMUL > 0x0 then _i3SZ.components.health:SetMaxHealth((_NWIB.health or 0x64) * TUNING.DYC_SUPERWALL_HEALTHMUL) _i3SZ.components.health.currenthealth = (_NWIB.health or 0x64) * TUNING.DYC_SUPERWALL_HEALTHMUL else _i3SZ.components.health:SetMaxHealth(0x3e8) _i3SZ.components.health.currenthealth = 0x3e8 end end _i3SZ.components.health.ondelta = _i0Fp _i3SZ.components.health.canheal = false _i3SZ.components.health.nofadeout = true MakeHauntableWork(_i3SZ) if _tdAO and not _i3SZ.isUpDownDoor then _i3SZ:AddComponent( "activatable" ) _i3SZ.components.activatable.OnActivate = _vu04 _i3SZ.components.activatable.standingaction = true else MakeSnowCovered(_i3SZ) end _i3SZ.OnSave = _9OKf _i3SZ.OnLoad = _Ncp3 if _tdAO then _i3SZ.doortask = _i3SZ:DoPeriodicTask(0.25, function() _A0AD(_i3SZ) end) end _i3SZ["dyccheckpostask".._Cpfy] = _i3SZ:DoPeriodicTask(1.0, function() local _XcBJ = _i3SZ["dycfixedposition".._Cpfy] local _QHaA = _i3SZ:GetPosition() if _XcBJ == nil then _i3SZ["dycfixedposition".._Cpfy] = _QHaA end if _XcBJ and (_XcBJ.x ~= _QHaA.x or _XcBJ.y ~= _QHaA.y or _XcBJ.z ~= _QHaA.z) then _i3SZ.Physics:Teleport(_XcBJ.x, _XcBJ.y, _XcBJ.z) end end) local _EB2b = _i3SZ.Remove _i3SZ.Remove = function(_Ofba) if not _Ofba["dycislastworkvalid".._Cpfy] then end _EB2b(_Ofba) end _i3SZ.FixUpFenceOrientation = _9a5Z _i3SZ.ChangeWallColor = _cPCp _i3SZ.GetAnimState = _QPLE function _i3SZ:SetWallHeight(_Vfed) self.wallpercent = _Vfed / 0x4 _cPCp(self) self.components.workable.workleft = math.floor(self.wallpercent * self.iniworkleft) self.workleft = self.components.workable.workleft if self._workleft ~= nil then self._workleft:set(self.components.workable.workleft) end end function _i3SZ:GetWallHeight() return self.workleft end function _i3SZ:DYCDestroyWall() self["dycislastworkvalid".._Cpfy] = true self.components.workable.onfinish(self, self) end return _i3SZ end return Prefab(_ROES, _yyyz, _N37y, custom_wall_prefabs or _Dz2I) end local function _6sd4(_ObFR, _UVEm, _GaKU) local _ptSg = { } if _UVEm.dyc or _UVEm.loadasset then if _UVEm.wide then table.insert(_ptSg, Asset( "ANIM" , "anim/"..(_UVEm.dyc and "dyc_" or "" ).._UVEm.wide..".zip" )) end if _UVEm.narrow then table.insert(_ptSg, Asset( "ANIM" , "anim/"..(_UVEm.dyc and "dyc_" or "" ).._UVEm.narrow..".zip" )) end end local function _KyV7() local _FxUc = CreateEntity() if _GaKU then _FxUc:AddTag( "can_offset_sort_pos" ) end _FxUc.entity:AddTransform() _FxUc.entity:AddAnimState() _FxUc.entity:AddNetwork() _FxUc.Transform:SetEightFaced() _FxUc.AnimState:SetBank(_UVEm.wide) _FxUc.AnimState:SetBuild((_UVEm.dyc and "dyc_" or "" ).._UVEm.wide) _FxUc.AnimState:PlayAnimation( "idle" ) _FxUc:AddTag( "FX" ) _FxUc:AddTag( "nointerpolate" ) if _GaKU then _FxUc.AnimState:Hide( "mouseover" ) end MakeSnowCoveredPristine(_FxUc) _FxUc.entity:SetPristine() if not TheWorld.ismastersim then _FxUc.OnEntityReplicated = _jH8f return _FxUc end MakeSnowCovered(_FxUc) _FxUc.persists = false return _FxUc end return Prefab(_ObFR, _KyV7, _ptSg) end local function _2Re2(_wtaF, _9G5P, _btQS, _6PEN) local _FqUC = _btQS.icon and "images/inventoryimages/".._btQS.icon..".xml" or "images/inventoryimages.xml" local _x8DH = _btQS.icon and _btQS.icon or string.sub(_wtaF, 0x5) SuperWall.defaultImages[_wtaF] = {_FqUC, _x8DH..".tex" } local _Ggzq = { } if type(_btQS) == "table" and (_btQS.dyc or _btQS.loadasset) then if _btQS.build then table.insert(_Ggzq, Asset( "ANIM" , "anim/"..(_btQS.dyc and "dyc_" or "" ).._btQS.build..".zip" )) end if _btQS.icon then table.insert(_Ggzq, Asset( "ATLAS" , "images/inventoryimages/".._btQS.icon..".xml" )) table.insert(_Ggzq, Asset( "IMAGE" , "images/inventoryimages/".._btQS.icon..".tex" )) end end local _qCYc = {_9G5P, } local function _QM0n(_afVT, _yceq, _Sda0, _3gHM) local _7MEx = SpawnPrefab(_9G5P, _afVT.linked_skinname, _afVT.skin_id) if _7MEx ~= nil then _yceq = _ycD9(_yceq) _7MEx.Physics:SetCollides(false) _7MEx.Physics:Teleport(_yceq.x, 0x0, _yceq.z) _7MEx["dycfixedposition".._Cpfy] = _7MEx:GetPosition() _7MEx.Physics:SetCollides(true) _afVT.components.stackable:Get():Remove() TheWorld.Pathfinder:AddWall(_yceq.x, 0x0, _yceq.z) _7MEx.dyc_ownerid = _Sda0.userid local _ZC82 = _Sda0.dycsw_wallbuilderheight or 0x0 _7MEx:SetWallHeight(_85sL(_ZC82 + 0x4, 0x1, 0x4)) _9a5Z(_7MEx, _3gHM or 0x0) _7MEx.SoundEmitter:PlaySound( "dontstarve/common/place_structure_wood" ) end end local function _hOyJ() local _ENbt = CreateEntity() _ENbt.entity:AddTransform() _ENbt.entity:AddAnimState() _ENbt.entity:AddNetwork() MakeInventoryPhysics(_ENbt) _ENbt:AddTag(_6PEN and "gatebuilder" or "fencebuilder" ) if type(_btQS) == "table" then if _btQS.scale then _ENbt.Transform:SetScale(_btQS.scale.x or 0x1, _btQS.scale.y or 0x1, _btQS.scale.z or 0x1) end _ENbt.AnimState:SetBank(_btQS.bank) if type(_btQS) == "table" and _btQS.dyc then _ENbt.AnimState:SetBuild( "dyc_".._btQS.build) else _ENbt.AnimState:SetBuild(_btQS.build) end _ENbt.AnimState:PlayAnimation(_btQS.anim or "inventory" ) else _ENbt.AnimState:SetBank(_btQS) _ENbt.AnimState:SetBuild(_btQS) _ENbt.AnimState:PlayAnimation( "inventory" ) end _ENbt:DoTaskInTime(FRAMES, function() if _ENbt.components and _ENbt.components.inventoryitem and _ENbt.components.inventoryitem.imagename ~= _x8DH then _ENbt.components.inventoryitem.atlasname = nil _ENbt:PushEvent( "imagechange" ) end if _ENbt.replica and _ENbt.replica.inventoryitem then _ENbt:PushEvent( "imagechange" ) end end) _ENbt.entity:SetPristine() if not TheWorld.ismastersim then return _ENbt end _ENbt:AddComponent( "stackable" ) _ENbt.components.stackable.maxsize = TUNING.STACK_SIZE_MEDITEM _ENbt:AddComponent( "inspectable" ) _ENbt:AddComponent( "inventoryitem" ) _ENbt.components.inventoryitem.atlasname = _FqUC _ENbt.components.inventoryitem.imagename = _x8DH _ENbt:AddComponent( "deployable" ) _ENbt.components.deployable.ondeploy = _QM0n _ENbt.components.deployable:SetDeployMode(DEPLOYMODE.WALL) _ENbt.components.deployable.CanDeploy = function(_YqMz, _Ebeu, _3mZD) return _4jCi(_YqMz.inst, _Ebeu) end MakeHauntableLaunch(_ENbt) return _ENbt end return Prefab(_wtaF, _hOyJ, _Ggzq, _qCYc) end local function _fIxk(_5mfe, _hCxI) _5mfe.wallpercent = _hCxI / 0x4 if _5mfe.ChangeWallColor then _5mfe:ChangeWallColor() else end end local function _h3LU(_NFWe) _NFWe:DoTaskInTime(FRAMES, function() if _NFWe.dyc_noplacerpostinit then return end _NFWe.entity:AddLabel() _NFWe.Label:SetFont(NUMBERFONT) _NFWe.Label:SetFontSize(0x16) _NFWe.Label:SetColour(0x1, 0x1, 0x1) _NFWe.Label:SetText( " " ) _NFWe.Label:Enable(true) local _bRbM = ThePlayer local function _Dih6(_IkEN) _fIxk(_IkEN, _85sL(0x4 + SuperWall.wallBuilderHeightAdjustment, 0x1, 0x4)) local _NFWI = (SuperWall.wallBuilderHeightAdjustment > 0x0 and "+" ) or "" _IkEN.Label:SetText(TUNING.DYC_SUPERWALL_STRINGS.singlewallbuild_2.."\n"..TUNING.DYC_SUPERWALL_STRINGS.heightadjustment_2..":".._NFWI..SuperWall.wallBuilderHeightAdjustment.."\n"..TUNING.DYC_SUPERWALL_STRINGS.fencealthint.."\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  " ) end local function _qoOr(_I7lv) if SuperWall.wallBuilderHeightAdjustment < 0x3 then SuperWall.wallBuilderHeightAdjustment = SuperWall.wallBuilderHeightAdjustment + 0x1 end SuperWall.SetWallBuilderHeight(SuperWall.wallBuilderHeightAdjustment) _Dih6(_I7lv) end local function _3esL(_ztQy) if SuperWall.wallBuilderHeightAdjustment > - 0x3 then SuperWall.wallBuilderHeightAdjustment = SuperWall.wallBuilderHeightAdjustment - 0x1 end SuperWall.SetWallBuilderHeight(SuperWall.wallBuilderHeightAdjustment) _Dih6(_ztQy) end SuperWall.IncreaseWallSetHeight = function() _qoOr(_NFWe) end SuperWall.DecreaseWallSetHeight = function() _3esL(_NFWe) end _NFWe.dycwallplacertask = _NFWe:DoPeriodicTask(FRAMES, function() if TheSim:GetMouseButtonState(MOUSEBUTTON_RIGHT) then if _NFWe.dycisrightmouseup then local _AUCy = _bRbM local _HVQW = TheInput:GetWorldPosition() local _eiG7 = TheInput:GetWorldEntityUnderMouse() local _8U5L = TheInput:GetHUDEntityUnderMouse() if _8U5L == nil and _AUCy and _AUCy.replica.inventory and _AUCy.replica.inventory:GetActiveItem() then local _gcDy = _AUCy.replica.inventory:GetActiveItem() if _4jCi(_gcDy, _HVQW) and _eiG7 == nil then SuperWall.BuildWall(_HVQW.x, _HVQW.z, _NFWe.Transform:GetRotation()) else _AUCy.replica.inventory:ReturnActiveItem() end end end _NFWe.dycisrightmouseup = false else _NFWe.dycisrightmouseup = true end end) _NFWe.oldonrightclick = _bRbM.components.playercontroller.OnRightClick _bRbM.components.playercontroller.OnRightClick = function() end _NFWe.OnRemoveEntity = function(_1EFd) _bRbM.components.playercontroller.OnRightClick = _1EFd.oldonrightclick if _1EFd.dycwallplacertask then _1EFd.dycwallplacertask:Cancel() end SuperWall.IncreaseWallSetHeight = nil SuperWall.DecreaseWallSetHeight = nil end _Dih6(_NFWe) end) end local function _FPTz(_ZGGo) _9a5Z(_ZGGo, nil) end local function _Dfn2(_cybF, _I1nz, _Boxi, _jQEw, _0rH5) local _py21 = _jQEw and function(_br6I) local _MrD2 = CreateEntity() _MrD2.entity:AddTransform() _MrD2.entity:AddAnimState() if not _Boxi.onefaced then _MrD2.Transform:SetEightFaced() end if _Boxi.onefaced then _MrD2.AnimState:SetBank(_Boxi.onefaced) _MrD2.AnimState:SetBuild((_Boxi.dyc and "dyc_" or "" ).._Boxi.onefaced) else _MrD2.AnimState:SetBank(_Boxi.wide) _MrD2.AnimState:SetBuild((_Boxi.dyc and "dyc_" or "" ).._Boxi.wide) end _MrD2.AnimState:PlayAnimation( "idle" ) _MrD2.AnimState:Hide( "mouseover" ) _MrD2.AnimState:SetLightOverride(0x1) _MrD2:AddTag( "FX" ) _MrD2:AddTag( "placer" ) _MrD2:AddTag( "NOCLICK" ) _MrD2.entity:SetCanSleep(false) _MrD2.persists = false if _Boxi.onefaced then _MrD2.isOneFaced = true end return _MrD2 end or nil return MakePlacer(_cybF, _Boxi.wide or _Boxi.onefaced, (_Boxi.dyc and "dyc_"..(_Boxi.wide or _Boxi.onefaced)) or _Boxi.wide or _Boxi.onefaced, (_Boxi.hideanim and "" ) or (not _jQEw and "idle" ) or "" , nil, nil, true, nil, 0x0, "eight" , function(_HdIR) local _a80a = _HdIR.components.placer.OnUpdate _HdIR.components.placer.OnUpdate = function(_rfMr, _sKpj) _a80a(_rfMr, _sKpj) if _rfMr.onupdatetransform ~= nil then _rfMr.onupdatetransform(_rfMr.inst) end end _HdIR.components.placer.onupdatetransform = _FPTz _HdIR.FixUpFenceOrientation = _9a5Z _HdIR.ChangeWallColor = _cPCp _HdIR.GetAnimState = _QPLE _HdIR.builds = _Boxi if _jQEw then _HdIR.isdoor = true _HdIR.isswingright = false _HdIR.dooranim = _py21() _HdIR.dooranim.entity:SetParent(_HdIR.entity) _HdIR.components.placer:LinkEntity(_HdIR.dooranim) end if _0rH5 then _0rH5(_HdIR) end if _HdIR.wallAnimChildren then for _cjxl, _IrMO in pairs(_HdIR.wallAnimChildren) do _IrMO.AnimState:SetLightOverride(0x1) _HdIR.components.placer:LinkEntity(_IrMO) end end _h3LU(_HdIR) end) end local _GkDr = { "dyc_fence" , "dyc_fence_item" , "dyc_fence_gate" , "dyc_fence_gate_item" , } for _4OXj, _UELg in pairs(_GkDr) do local _hWv2 = _UELg:gsub( "dyc_" , "" ) PREFAB_SKINS[_UELg] = PREFAB_SKINS[_hWv2] PREFAB_SKINS_IDS[_UELg] = PREFAB_SKINS_IDS[_hWv2] end return _4MEY( "dyc_fence" , {wide = "fence" , narrow = "fence_thin" }, false), _2Re2( "dyc_fence_item" , "dyc_fence" , "fence" , false), _Dfn2( "dyc_fence_item_placer" , "dyc_fence" , {wide = "fence" , narrow = "fence_thin" }, false), _4MEY( "dyc_fence_gate" , {wide = "fence_gate" , narrow = "fence_gate_thin" }, true), _6sd4( "dyc_fence_gate_anim" , {wide = "fence_gate" , narrow = "fence_gate_thin" }, true), _2Re2( "dyc_fence_gate_item" , "dyc_fence_gate" , "fence_gate" , true), _Dfn2( "dyc_fence_gate_item_placer" , "dyc_fence_gate" , {wide = "fence_gate" , narrow = "fence_gate_thin" }, true), _4MEY( "dyc_park_fence" , {onefaced = "dyc_park_fence" , hideanim = true, minimap = "minimap_park_fence.tex" , loot = "flint" , health = 0x12c, loadasset = true}, false, _MgmK), _2Re2( "dyc_park_fence_item" , "dyc_park_fence" , {bank = "dyc_park_fence" , build = "dyc_park_fence" , icon = "parkfence" , loadasset = true}, false), _Dfn2( "dyc_park_fence_item_placer" , "dyc_park_fence" , {onefaced = "dyc_park_fence" , hideanim = true}, false, _MgmK), _4MEY( "dyc_park_door" , {onefaced = "dyc_park_fence" , hideanim = true, updowndoor = true, hitanim = "onlywhenclosed" , minimap = "minimap_park_fence.tex" , loot = "flint" , lootnum = 0x1, health = 0x12c, loadasset = true}, true, _MgmK), _2Re2( "dyc_park_door_item" , "dyc_park_door" , {bank = "dyc_park_fence" , build = "dyc_park_fence" , icon = "parkdoor" , loadasset = true}, true), _Dfn2( "dyc_park_door_item_placer" , "dyc_park_door" , {onefaced = "dyc_park_fence" , hideanim = true}, false, _MgmK), _4MEY( "dyc_park_gate" , {wide = "quagmire_park_gate" , minimap = "minimap_park_gate.tex" , loot = "flint" , health = 0x1f4, dyc = true}, true), _6sd4( "dyc_park_gate_anim" , {wide = "quagmire_park_gate" , dyc = true}, true), _2Re2( "dyc_park_gate_item" , "dyc_park_gate" , {bank = "dyc_park_gate_inv" , build = "dyc_park_gate_inv" , anim = "idle" , icon = "parkgate" , loadasset = true}, true), _Dfn2( "dyc_park_gate_item_placer" , "dyc_park_gate" , {wide = "quagmire_park_gate" , dyc = true}, true) 