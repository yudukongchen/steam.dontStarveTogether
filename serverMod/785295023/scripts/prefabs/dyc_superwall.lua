require "prefabutil" local _GAQr = {Asset( "ATLAS" , "images/inventoryimages/wooddoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/wooddoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/haydoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/haydoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/stonedoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/stonedoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/ruindoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/ruindoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/limestonedoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/limestonedoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/limestonewall.xml" ), Asset( "IMAGE" , "images/inventoryimages/limestonewall.tex" ), Asset( "ATLAS" , "images/inventoryimages/moonrockdoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/moonrockdoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/icedoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/icedoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/icewall.xml" ), Asset( "IMAGE" , "images/inventoryimages/icewall.tex" ), Asset( "ATLAS" , "images/inventoryimages/seadoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/seadoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/seawall.xml" ), Asset( "IMAGE" , "images/inventoryimages/seawall.tex" ), Asset( "ATLAS" , "images/inventoryimages/dycpigruindoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/dycpigruindoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/dycpigruinwall.xml" ), Asset( "IMAGE" , "images/inventoryimages/dycpigruinwall.tex" ), Asset( "ATLAS" , "images/inventoryimages/dychedgeblockdoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/dychedgeblockdoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/dychedgeblockwall.xml" ), Asset( "IMAGE" , "images/inventoryimages/dychedgeblockwall.tex" ), Asset( "ATLAS" , "images/inventoryimages/dychedgeconedoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/dychedgeconedoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/dychedgeconewall.xml" ), Asset( "IMAGE" , "images/inventoryimages/dychedgeconewall.tex" ), Asset( "ATLAS" , "images/inventoryimages/dychedgelayereddoor.xml" ), Asset( "IMAGE" , "images/inventoryimages/dychedgelayereddoor.tex" ), Asset( "ATLAS" , "images/inventoryimages/dychedgelayeredwall.xml" ), Asset( "IMAGE" , "images/inventoryimages/dychedgelayeredwall.tex" ), Asset( "ATLAS" , "images/inventoryimages/wallbuilder.xml" ), Asset( "IMAGE" , "images/inventoryimages/wallbuilder.tex" ), Asset( "ANIM" , "anim/dyc_wall_limestone.zip" ), Asset( "ANIM" , "anim/dyc_wall_ice.zip" ), Asset( "ANIM" , "anim/dyc_wall_sea.zip" ), Asset( "ANIM" , "anim/dyc_wall_pig_ruins.zip" ), Asset( "ANIM" , "anim/dyc_hedge.zip" ), Asset( "ANIM" , "anim/dyc_hedge_block.zip" ), Asset( "ANIM" , "anim/dyc_hedge_cone.zip" ), Asset( "ANIM" , "anim/dyc_hedge_layered.zip" ), Asset( "ANIM" , "anim/dyc_square.zip" ), Asset( "ANIM" , "anim/dyc_square2.zip" ), } local _p9pS = { } local _ET9F = {hay = {bank = "wall" , build = "wall_hay" , anim = "fullA" , minimap = "minimap_wall_hay.tex" , tags = { "grass" }, loots = {cutgrass = 0x1}, buildsound = "dontstarve/common/place_structure_straw" , destroysound = "dontstarve/common/destroy_straw" , hp = 0x64, itemanim = "idle" , dooratlas = "images/inventoryimages/haydoor.xml" , doorimage = "haydoor" , wallatlas = "images/inventoryimages.xml" , wallimage = "wall_hay_item" , }, wood = {bank = "wall" , build = "wall_wood" , anim = "fullA" , minimap = "minimap_wall_wood.tex" , tags = { "wood" }, loots = {log = 0x1}, buildsound = "dontstarve/common/place_structure_wood" , destroysound = "dontstarve/common/destroy_wood" , hp = 0xc8, itemanim = "idle" , dooratlas = "images/inventoryimages/wooddoor.xml" , doorimage = "wooddoor" , wallatlas = "images/inventoryimages.xml" , wallimage = "wall_wood_item" , }, stone = {bank = "wall" , build = "wall_stone" , anim = "fullA" , minimap = "minimap_wall_stone.tex" , tags = { "stone" }, loots = {rocks = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x190, itemanim = "idle" , dooratlas = "images/inventoryimages/stonedoor.xml" , doorimage = "stonedoor" , wallatlas = "images/inventoryimages.xml" , wallimage = "wall_stone_item" , }, ruin = {bank = "wall" , build = "wall_ruins" , anim = "fullA" , minimap = "minimap_wall_ruins.tex" , tags = { "stone" , "ruins" }, loots = {thulecite_pieces = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x320, itemanim = "idle" , dooratlas = "images/inventoryimages/ruindoor.xml" , doorimage = "ruindoor" , wallatlas = "images/inventoryimages.xml" , wallimage = "wall_ruins_item" , }, limestone = {bank = "wall" , build = "dyc_wall_limestone" , anim = "fullA" , minimap = "minimap_wall_limestone.tex" , tags = { "stone" }, loots = {rocks = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x1f4, itemanim = "idle" , dooratlas = "images/inventoryimages/limestonedoor.xml" , doorimage = "limestonedoor" , wallatlas = "images/inventoryimages/limestonewall.xml" , wallimage = "limestonewall" , }, moonrock = {bank = "wall" , build = "wall_moonrock" , anim = "fullA" , minimap = "minimap_wall_moonrock.tex" , tags = { "stone" , "moonrock" }, loots = {moonrocknugget = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x3e8, itemanim = "idle" , dooratlas = "images/inventoryimages/moonrockdoor.xml" , doorimage = "moonrockdoor" , wallatlas = "images/inventoryimages.xml" , wallimage = "wall_moonrock_item" , }, ice = {bank = "wall" , build = "dyc_wall_ice" , anim = "fullA" , minimap = "minimap_wall_ice.tex" , tags = { "ice" }, loots = {ice = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x258, itemanim = "idle" , dooratlas = "images/inventoryimages/icedoor.xml" , doorimage = "icedoor" , wallatlas = "images/inventoryimages/icewall.xml" , wallimage = "icewall" , }, sea = {bank = "wall" , build = "dyc_wall_sea" , anim = "fullA" , minimap = "minimap_wall_sea.tex" , tags = { "stone" }, loots = {cutreeds = 0x1, rocks = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x2ee, itemanim = "idle" , dooratlas = "images/inventoryimages/seadoor.xml" , doorimage = "seadoor" , wallatlas = "images/inventoryimages/seawall.xml" , wallimage = "seawall" , }, pigruin = {bank = "wall" , build = "dyc_wall_pig_ruins" , anim = "fullA" , minimap = "minimap_wall_pigruin.tex" , tags = { "stone" }, loots = {rocks = 0x1}, buildsound = "dontstarve/common/place_structure_stone" , destroysound = "dontstarve/common/destroy_stone" , hp = 0x1c2, itemanim = "idle" , dooratlas = "images/inventoryimages/dycpigruindoor.xml" , doorimage = "dycpigruindoor" , wallatlas = "images/inventoryimages/dycpigruinwall.xml" , wallimage = "dycpigruinwall" , }, hedge_block = {bank = "dyc_hedge" , build = "dyc_hedge_block" , anim = "fullA" , minimap = "minimap_hedge.tex" , tags = { "grass" }, loots = {cutgrass = 0x1}, buildsound = "dontstarve/common/place_structure_straw" , destroysound = "dontstarve/common/destroy_straw" , hp = 0x96, itemanim = "idle" , dooratlas = "images/inventoryimages/dychedgeblockdoor.xml" , doorimage = "dychedgeblockdoor" , wallatlas = "images/inventoryimages/dychedgeblockwall.xml" , wallimage = "dychedgeblockwall" , }, hedge_cone = {bank = "dyc_hedge" , build = "dyc_hedge_cone" , anim = "fullA" , minimap = "minimap_hedge.tex" , tags = { "grass" }, loots = {cutgrass = 0x1}, buildsound = "dontstarve/common/place_structure_straw" , destroysound = "dontstarve/common/destroy_straw" , hp = 0x96, itemanim = "idle" , dooratlas = "images/inventoryimages/dychedgeconedoor.xml" , doorimage = "dychedgeconedoor" , wallatlas = "images/inventoryimages/dychedgeconewall.xml" , wallimage = "dychedgeconewall" , }, hedge_layered = {bank = "dyc_hedge" , build = "dyc_hedge_layered" , anim = "fullA" , minimap = "minimap_hedge.tex" , tags = { "grass" }, loots = {cutgrass = 0x1}, buildsound = "dontstarve/common/place_structure_straw" , destroysound = "dontstarve/common/destroy_straw" , hp = 0x96, itemanim = "idle" , dooratlas = "images/inventoryimages/dychedgelayereddoor.xml" , doorimage = "dychedgelayereddoor" , wallatlas = "images/inventoryimages/dychedgelayeredwall.xml" , wallimage = "dychedgelayeredwall" , }, } local _xCI8 = math.random() local function _Gcvk(_FqNE, _5Mzn, _6Uo5) if _FqNE < _5Mzn then _FqNE = _5Mzn elseif _FqNE > _6Uo5 then _FqNE = _6Uo5 end return _FqNE end local function _e42e(_szcp) if _szcp % 0x1 >= 0.5 then return math.ceil(_szcp) else return math.floor(_szcp) end end local function _nIPw(_kvjo, _zFIt, _FOvp) if not SuperWall.isSW or not GROUND then return false end local _WmvM = TheWorld.Map:GetTile(TheWorld.Map:GetTileCoordsAtPoint(_kvjo, _zFIt, _FOvp)) if not _WmvM then return false end if _WmvM == GROUND.IMPASSABLE or _WmvM == GROUND.WATER_MANGROVE or _WmvM == GROUND.WATER_CORAL or _WmvM == GROUND.WATER_DEEP or _WmvM == GROUND.WATER_MEDIUM or _WmvM == GROUND.WATER_SHALLOW then return true else return false end end local function _JbVU(_EdAD) return _nIPw(_EdAD.Transform:GetWorldPosition()) end local function _JEPg(_af66) return SuperWall.isSW and (_af66 == "dyc_wall_sea" or _af66 == "dyc_wall_sea_item" or _af66 == "dyc_door_sea" or _af66 == "dyc_door_sea_item" ) end function IsWaterWall(_LruK) return _JEPg(_LruK.prefab) end local function _DlYB(_l5Az, _IMrg, _dzPm) local _W51g, y, z = _IMrg.x, _IMrg.y, _IMrg.z local _4PO5 = TheWorld.Map:CanDeployWallAtPoint(_IMrg, _l5Az) and (not _nIPw(_W51g, y, z) or (_dzPm and _JEPg(_dzPm) or IsWaterWall(_l5Az))) return _4PO5 end local function _ZCtz(_SzOF) if _SzOF._ispathfinding:value() then if _SzOF._pfpos == nil then _SzOF._pfpos = _SzOF:GetPosition() TheWorld.Pathfinder:AddWall(_SzOF._pfpos:Get()) end elseif _SzOF._pfpos ~= nil then TheWorld.Pathfinder:RemoveWall(_SzOF._pfpos:Get()) _SzOF._pfpos = nil end end local function _2Vjx(_nuII) _nuII:ListenForEvent( "onispathfindingdirty" , _ZCtz) _ZCtz(_nuII) end local function _Na56(_mJcK) _mJcK.Physics:SetActive(true) _mJcK._ispathfinding:set(true) end local function _ATjP(_znPX) _znPX.Physics:SetActive(false) _znPX._ispathfinding:set(false) end local function _G2MT(_MbRi) local _8Vos = _MbRi.wallpercent local _qr9C = "broken" if _8Vos >= 0x1 then _qr9C = "fullA" elseif _8Vos >= 0.75 then _qr9C = "threequarter" elseif _8Vos >= 0.5 then _qr9C = "half" elseif _8Vos >= 0.25 then _qr9C = "onequarter" elseif _8Vos >= 0x0 then _qr9C = "broken" end return _qr9C end local function _wtD3(_URSp) if _URSp == "haywall" then return {name = _URSp, prefab = "dyc_wall_hay" , item = "dyc_wall_hay_item" , placerprefab = "dyc_wall_hay_item_placer" , } end if _URSp == "woodwall" then return {name = _URSp, prefab = "dyc_wall_wood" , item = "dyc_wall_wood_item" , placerprefab = "dyc_wall_wood_item_placer" , } end if _URSp == "stonewall" then return {name = _URSp, prefab = "dyc_wall_stone" , item = "dyc_wall_stone_item" , placerprefab = "dyc_wall_stone_item_placer" , } end if _URSp == "ruinwall" then return {name = _URSp, prefab = "dyc_wall_ruin" , item = "dyc_wall_ruin_item" , placerprefab = "dyc_wall_ruin_item_placer" , } end if _URSp == "limestonewall" then return {name = _URSp, prefab = "dyc_wall_limestone" , item = "dyc_wall_limestone_item" , placerprefab = "dyc_wall_limestone_item_placer" , } end if _URSp == "moonrockwall" then return {name = _URSp, prefab = "dyc_wall_moonrock" , item = "dyc_wall_moonrock_item" , placerprefab = "dyc_wall_moonrock_item_placer" , } end if _URSp == "icewall" then return {name = _URSp, prefab = "dyc_wall_ice" , item = "dyc_wall_ice_item" , placerprefab = "dyc_wall_ice_item_placer" , } end if _URSp == "seawall" then return {name = _URSp, prefab = "dyc_wall_sea" , item = "dyc_wall_sea_item" , placerprefab = "dyc_wall_sea_item_placer" , } end if _URSp == "pigruinwall" then local _zS99 = "dyc_wall_pigruin" return {name = _URSp, prefab = _zS99, item = _zS99.."_item" , placerprefab = _zS99.."_item_placer" , userotation = true, } end if _URSp == "hedgeblockwall" then local _q8gO = "dyc_wall_hedge_block" return {name = _URSp, prefab = _q8gO, item = _q8gO.."_item" , placerprefab = _q8gO.."_item_placer" , userotation = true, } end if _URSp == "hedgeconewall" then local _fv0u = "dyc_wall_hedge_cone" return {name = _URSp, prefab = _fv0u, item = _fv0u.."_item" , placerprefab = _fv0u.."_item_placer" , userotation = true, } end if _URSp == "hedgelayeredwall" then local _SZ5M = "dyc_wall_hedge_layered" return {name = _URSp, prefab = _SZ5M, item = _SZ5M.."_item" , placerprefab = _SZ5M.."_item_placer" , userotation = true, } end if _URSp == "haydoor" then return {name = _URSp, prefab = "dyc_door_hay" , item = "dyc_door_hay_item" , placerprefab = "dyc_door_hay_item_placer" , } end if _URSp == "wooddoor" then return {name = _URSp, prefab = "dyc_door_wood" , item = "dyc_door_wood_item" , placerprefab = "dyc_door_wood_item_placer" , } end if _URSp == "stonedoor" then return {name = _URSp, prefab = "dyc_door_stone" , item = "dyc_door_stone_item" , placerprefab = "dyc_door_stone_item_placer" , } end if _URSp == "ruindoor" then return {name = _URSp, prefab = "dyc_door_ruin" , item = "dyc_door_ruin_item" , placerprefab = "dyc_door_ruin_item_placer" , } end if _URSp == "limestonedoor" then return {name = _URSp, prefab = "dyc_door_limestone" , item = "dyc_door_limestone_item" , placerprefab = "dyc_door_limestone_item_placer" , } end if _URSp == "moonrockdoor" then return {name = _URSp, prefab = "dyc_door_moonrock" , item = "dyc_door_moonrock_item" , placerprefab = "dyc_door_moonrock_item_placer" , } end if _URSp == "icedoor" then return {name = _URSp, prefab = "dyc_door_ice" , item = "dyc_door_ice_item" , placerprefab = "dyc_door_ice_item_placer" , } end if _URSp == "seadoor" then return {name = _URSp, prefab = "dyc_door_sea" , item = "dyc_door_sea_item" , placerprefab = "dyc_door_sea_item_placer" , } end if _URSp == "pigruindoor" then local _tW8B = "dyc_door_pigruin" return {name = _URSp, prefab = _tW8B, item = _tW8B.."_item" , placerprefab = _tW8B.."_item_placer" , userotation = true, } end if _URSp == "hedgeblockdoor" then local _vUui = "dyc_door_hedge_block" return {name = _URSp, prefab = _vUui, item = _vUui.."_item" , placerprefab = _vUui.."_item_placer" , userotation = true, } end if _URSp == "hedgeconedoor" then local _UQsg = "dyc_door_hedge_cone" return {name = _URSp, prefab = _UQsg, item = _UQsg.."_item" , placerprefab = _UQsg.."_item_placer" , userotation = true, } end if _URSp == "hedgelayereddoor" then local _TWdZ = "dyc_door_hedge_layered" return {name = _URSp, prefab = _TWdZ, item = _TWdZ.."_item" , placerprefab = _TWdZ.."_item_placer" , userotation = true, } end if _URSp == "fence" then return {name = _URSp, prefab = "dyc_fence" , item = "dyc_fence_item" , placerprefab = "dyc_fence_item_placer" , userotation = true, } end if _URSp == "fencegate" then return {name = _URSp, prefab = "dyc_fence_gate" , item = "dyc_fence_gate_item" , placerprefab = "dyc_fence_gate_item_placer" , userotation = true, } end if _URSp == "parkfence" then local _kwt4 = "dyc_park_fence" return {name = _URSp, prefab = _kwt4, item = _kwt4.."_item" , placerprefab = _kwt4.."_item_placer" , userotation = true, } end if _URSp == "parkdoor" then local _bS19 = "dyc_park_door" return {name = _URSp, prefab = _bS19, item = _bS19.."_item" , placerprefab = _bS19.."_item_placer" , userotation = true, } end if _URSp == "parkgate" then local _PJm5 = "dyc_park_gate" return {name = _URSp, prefab = _PJm5, item = _PJm5.."_item" , placerprefab = _PJm5.."_item_placer" , userotation = true, } end end local _BOTH = SuperWall.Id2Player local _x1J7 = SuperWall.Player2Index local _Tr3P = SuperWall.IsAuthorized local function _y0oJ(_Pa5t) if _Pa5t.doorstate and _Pa5t.components.workable.workleft > 0x0 then _Na56(_Pa5t) else _ATjP(_Pa5t) end end local function _rbkv(_FbKL) local _48VW = Vector3(math.floor(_FbKL.x) + .5, 0x0, math.floor(_FbKL.z) + .5) return _48VW end local function _HyRg(_7VS1, _mff2, _COFk) local _DstP = SpawnPrefab(_7VS1.deployprefab, _7VS1.linked_skinname, _7VS1.skin_id) if _DstP then _mff2 = _rbkv(_mff2) _DstP.Physics:SetCollides(false) _DstP.Physics:Teleport(_mff2.x, 0x0, _mff2.z) _DstP["dycfixedposition".._xCI8] = _DstP:GetPosition() _DstP.Physics:SetCollides(true) _7VS1.components.stackable:Get():Remove() TheWorld.Pathfinder:AddWall(_mff2.x, 0x0, _mff2.z) _DstP.dyc_ownerid = _COFk.userid local _N3Nz = _COFk.dycsw_wallbuilderheight or 0x0 _DstP:SetWallHeight(_Gcvk(_N3Nz + 0x4, 0x1, 0x4)) end end local function _Dxbv(_r8cU, _Fhh9) if not _r8cU["dycislastworkvalid".._xCI8] then return end if _r8cU.loots and type(_r8cU.loots) == "table" then for _jiM4, _rdhm in pairs(_r8cU.loots) do for _5s31 = 0x1, _rdhm do _r8cU.components.lootdropper:SpawnLootPrefab(_jiM4) end end elseif _r8cU.loot then local _GzhM = 0x1 for _OgiO = 0x1, _GzhM do _r8cU.components.lootdropper:SpawnLootPrefab(_r8cU.loot) end end SpawnPrefab( "collapse_small" ).Transform:SetPosition(_r8cU.Transform:GetWorldPosition()) if _r8cU.destroysound then _r8cU.SoundEmitter:PlaySound(_r8cU.destroysound) end _r8cU:Remove() end local function _VrMJ(_TxKn, _cvxv, _GGbu) if TUNING.DYC_SUPERWALL_HEALTHMUL < 0x0 then _TxKn.components.health.currenthealth = _TxKn.components.health.maxhealth _GGbu = 0x1 end if(_GGbu <= 0x0) then _TxKn:DYCDestroyWall() return end end local function _QzxK(_VADl) if _VADl.destroysound then _VADl.SoundEmitter:PlaySound(_VADl.destroysound) end if _VADl.wallpercent > _VADl.components.workable.workleft / _VADl.iniworkleft then _VADl.wallpercent = _VADl.components.workable.workleft / _VADl.iniworkleft end if _VADl.wallpercent < 0x0 then _VADl.wallpercent = 0x0 end local _EkZ2 = _G2MT(_VADl) local _0Afy = IsWaterWall(_VADl) if _VADl.wallpercent == 0x0 then _VADl.AnimState:PlayAnimation(_EkZ2, _0Afy) else _VADl.AnimState:PlayAnimation(_EkZ2.."_hit" ) _VADl.AnimState:PushAnimation(_EkZ2, _0Afy) end end local function _8Cn1(_Gck3, _D3jK, _4Hu9) local _xX6p = false if _D3jK.components.inventory then for _SI2u, _YAeJ in pairs(_D3jK.components.inventory.equipslots) do if _YAeJ.components.tool and _YAeJ.components.tool:CanDoAction(ACTIONS.HAMMER) then _xX6p = true if _YAeJ.components.finiteuses then _YAeJ.components.finiteuses:Use( - 0x1) end break end end end local _ISxM = false if _Tr3P(_Gck3, _D3jK) then _ISxM = true end if TUNING.DYC_SUPERWALL_BOSSRES == true then if not _xX6p or not _ISxM then _Gck3["dycislastworkvalid".._xCI8] = false _Gck3.components.workable.destroyed = false _Gck3.components.workable.workleft = _Gck3.workleft else _Gck3["dycislastworkvalid".._xCI8] = true _Gck3.workleft = _Gck3.workleft - 0.25 * _Gck3.iniworkleft _Gck3.components.workable.workleft = _Gck3.workleft _QzxK(_Gck3) end else if _xX6p and not _ISxM then _Gck3["dycislastworkvalid".._xCI8] = false _Gck3.components.workable.destroyed = false _Gck3.components.workable.workleft = _Gck3.workleft else _Gck3["dycislastworkvalid".._xCI8] = true if not _xX6p then _Gck3.workleft = _Gck3.components.workable.workleft else _Gck3.workleft = _Gck3.workleft - 0.25 * _Gck3.iniworkleft _Gck3.components.workable.workleft = _Gck3.workleft end _QzxK(_Gck3) end end if _xX6p and not _ISxM and _D3jK.components.talker then local _p8wd = "" local _sjYN = "" if _Gck3.isdoor == true then _sjYN = TUNING.DYC_SUPERWALL_STRINGS.str1 else _sjYN = TUNING.DYC_SUPERWALL_STRINGS.str0 end local _pEg2 = _BOTH(_Gck3.dyc_ownerid) if _pEg2 ~= nil then if _pEg2.components.talker then _pEg2.components.talker:Say(_D3jK.name..TUNING.DYC_SUPERWALL_STRINGS.str13.._sjYN..TUNING.DYC_SUPERWALL_STRINGS.str6, 0x4) end _p8wd = TUNING.DYC_SUPERWALL_STRINGS.str3.._sjYN..TUNING.DYC_SUPERWALL_STRINGS.str5.._pEg2.name..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n" end _p8wd = _p8wd..TUNING.DYC_SUPERWALL_STRINGS.str12 _D3jK.components.talker:Say(_p8wd, 0x4) end end local function _r2q6(_ZZEd, _D0PA, _J3df) _QzxK(_ZZEd) if _D0PA.components.combat then if TUNING.DYC_SUPERWALL_REBOUNDDAMAGE > 0x0 then _D0PA.components.combat:GetAttacked(_ZZEd, TUNING.DYC_SUPERWALL_REBOUNDDAMAGE, nil) end end end local function _7KvV(_FHu5, _lqRo) local _8t9o = GetDescription(_lqRo, _FHu5, _FHu5.components.inspectable:GetStatus(_lqRo)) if TUNING.DYC_SUPERWALL_OWNERSHIP == 0x0 then return _8t9o end local _Bad5 = _FHu5.dyc_ownerid local _kiUS = "" if _FHu5.isdoor == true then _kiUS = TUNING.DYC_SUPERWALL_STRINGS.str1 else _kiUS = TUNING.DYC_SUPERWALL_STRINGS.str0 end if _Bad5 ~= nil then local _nuiz = _BOTH(_Bad5) if _nuiz == nil then if not _Tr3P(_FHu5, _lqRo) then return TUNING.DYC_SUPERWALL_STRINGS.str2 else return TUNING.DYC_SUPERWALL_STRINGS.str2.."\n"..TUNING.DYC_SUPERWALL_STRINGS.str14..TUNING.DYC_SUPERWALL_STRINGS.str15 end else if _nuiz == _lqRo then return TUNING.DYC_SUPERWALL_STRINGS.str3.._kiUS..TUNING.DYC_SUPERWALL_STRINGS.str4.."\n".._8t9o else if not _Tr3P(_FHu5, _lqRo) then if _FHu5.dyc_lastclickuid ~= _lqRo.userid then _FHu5.dyc_clickcount = 0x0 end _FHu5.dyc_lastclickuid = _lqRo.userid if _FHu5.dyc_clickcount == nil then _FHu5.dyc_clickcount = 0x1 else _FHu5.dyc_clickcount = _FHu5.dyc_clickcount + 0x1 if _FHu5.dyc_clickcount > 0x3 then _FHu5.dyc_clickcount = 0x0 if _nuiz.components.talker then _nuiz.components.talker:Say(_lqRo.name..TUNING.DYC_SUPERWALL_STRINGS.str20.._kiUS..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n"..TUNING.DYC_SUPERWALL_STRINGS.str21.._x1J7(_lqRo)..TUNING.DYC_SUPERWALL_STRINGS.str22, 0x4) end end end return TUNING.DYC_SUPERWALL_STRINGS.str3.._kiUS..TUNING.DYC_SUPERWALL_STRINGS.str5.._nuiz.name..TUNING.DYC_SUPERWALL_STRINGS.str6 else return TUNING.DYC_SUPERWALL_STRINGS.str3.._kiUS..TUNING.DYC_SUPERWALL_STRINGS.str5.._nuiz.name..TUNING.DYC_SUPERWALL_STRINGS.str6.."\n"..TUNING.DYC_SUPERWALL_STRINGS.str15.."\n".._8t9o end end end end return _8t9o end local function _t5Dz(_gTPO, _ivxT) if _gTPO.dyc_ownerid ~= nil then _ivxT.dyc_ownerid = _gTPO.dyc_ownerid end end local function _IvUI(_ipek, _0A8J) if _0A8J then if _0A8J.dyc_ownerid ~= nil then _ipek.dyc_ownerid = _0A8J.dyc_ownerid end end if _ipek.components.workable.workleft < 0.25 * _ipek.iniworkleft then _ipek.components.workable.workleft = _ipek.iniworkleft end _ipek.workleft = _ipek.components.workable.workleft _ipek.wallpercent = _ipek.components.workable.workleft / _ipek.iniworkleft local _Zh5Z = IsWaterWall(_ipek) _ipek.AnimState:PlayAnimation(_G2MT(_ipek), _Zh5Z) _y0oJ(_ipek) end local function _0NHl(_y4Mp) _ATjP(_y4Mp) _ZCtz(_y4Mp) if _y4Mp.doortask then _y4Mp.doortask:Cancel() end if _y4Mp.doortask2 then _y4Mp.doortask2:Cancel() end if _y4Mp["dyccheckpostask".._xCI8] then _y4Mp["dyccheckpostask".._xCI8]:Cancel() end end local function _Wshp(_Ougg) local _MtxY = false local _xmK7 = Vector3(_Ougg.Transform:GetWorldPosition()) for _p8J2, _74J9 in pairs(AllPlayers) do local _YZYF = Vector3(_74J9.Transform:GetWorldPosition()) local _XlvN = _YZYF:Dist(_xmK7) if _XlvN < TUNING.DYC_SUPERWALL_DOORDETECTRANGE and _Tr3P(_Ougg, _74J9) then _MtxY = true break end end if TUNING.DYC_SUPERWALL_COMPANION == true and TheWorld.dyc_superwall_companions ~= nil then for _SFVZ, _hZGF in pairs(TheWorld.dyc_superwall_companions) do if not _hZGF:IsValid() then table.remove(TheWorld.dyc_superwall_companions, _SFVZ) else if _hZGF.components.follower and _hZGF.components.follower.leader and _hZGF.components.follower.leader.components.inventoryitem and _hZGF.components.follower.leader.components.inventoryitem.owner then local _u26F = _hZGF.components.follower.leader.components.inventoryitem.owner if _Tr3P(_Ougg, _u26F) then local _TgCN = Vector3(_hZGF.Transform:GetWorldPosition()) local _cJ6A = _TgCN:Dist(_xmK7) if _cJ6A < TUNING.DYC_SUPERWALL_DOORDETECTRANGE then _MtxY = true break end else if _u26F.components.container and _u26F.components.inventoryitem then local _vTs2 = _u26F.components.inventoryitem.owner if _vTs2 and _Tr3P(_Ougg, _vTs2) then local _SiAY = Vector3(_hZGF.Transform:GetWorldPosition()) local _FKsB = _SiAY:Dist(_xmK7) if _FKsB < TUNING.DYC_SUPERWALL_DOORDETECTRANGE then _MtxY = true break end end end end elseif _hZGF.components.follower and _hZGF.components.follower.leader and _hZGF.components.follower.leader:HasTag( "player" ) then local _8Ug2 = _hZGF.components.follower.leader if _Tr3P(_Ougg, _8Ug2) then local _AUZz = Vector3(_hZGF.Transform:GetWorldPosition()) local _CdIf = _AUZz:Dist(_xmK7) if _CdIf < TUNING.DYC_SUPERWALL_DOORDETECTRANGE then _MtxY = true break end end end end end end if _MtxY then _Ougg.doorchanging = - 0x1 else _Ougg.doorchanging = 0x1 end end local function _7epR(_wlDo) if _wlDo.doorchanging < 0x0 and _wlDo.wallpercent > 0x0 then _wlDo.wallpercent = _wlDo.wallpercent - 0.25 if _wlDo.wallpercent <= 0x0 then _wlDo.wallpercent = 0x0 _wlDo.doorstate = false _y0oJ(_wlDo) end local _o5r9 = IsWaterWall(_wlDo) _wlDo.AnimState:PlayAnimation(_G2MT(_wlDo), _o5r9) elseif _wlDo.doorchanging > 0x0 and _wlDo.wallpercent < _wlDo.components.workable.workleft / _wlDo.iniworkleft then _wlDo.wallpercent = _wlDo.wallpercent + 0.25 if _wlDo.wallpercent >= _wlDo.components.workable.workleft / _wlDo.iniworkleft then _wlDo.wallpercent = _wlDo.components.workable.workleft / _wlDo.iniworkleft _wlDo.doorstate = true _y0oJ(_wlDo) end local _m2h9 = IsWaterWall(_wlDo) _wlDo.AnimState:PlayAnimation(_G2MT(_wlDo), _m2h9) end end local function _yRaU(_JFH9, _aKns) local _TH7s = "dyc_"..(_aKns and "door" or "wall" ).."_".._JFH9 local _ln5O = _ET9F[_JFH9] local function _3TBu() local _hemd = CreateEntity() local _CgPH = _hemd.entity:AddTransform() _hemd.doorstate = true _hemd.doorchanging = 0x1 _hemd.wallpercent = 0x1 _hemd.iniworkleft = 0x4 _hemd.workleft = _hemd.iniworkleft _hemd["dycislastworkvalid".._xCI8] = false _hemd.isdoor = _aKns _hemd.entity:AddAnimState() _hemd.entity:AddSoundEmitter() _hemd.entity:AddNetwork() if TUNING.DYC_SUPERWALL_MINIMAPICON then _hemd.entity:AddMiniMapEntity() _hemd.MiniMapEntity:SetPriority( - 0x1) end _CgPH:SetEightFaced() _hemd:AddTag( "superwall" ) _hemd:AddTag( "wall" ) _hemd:AddTag( "noauradamage" ) _hemd:AddTag( "floodblocker" ) MakeObstaclePhysics(_hemd, .5) _hemd.Physics:SetDontRemoveOnSleep(true) _hemd.loots = _ln5O.loots _hemd.buildsound = _ln5O.buildsound _hemd.destroysound = _ln5O.destroysound _hemd.AnimState:SetBank(_ln5O.bank) _hemd.AnimState:SetBuild(_ln5O.build) _hemd.AnimState:PlayAnimation(_ln5O.anim, false) _hemd.SoundEmitter:PlaySound(_hemd.buildsound) for _N0aV, _dYFB in pairs(_ln5O.tags) do _hemd:AddTag(_dYFB) end if _hemd.MiniMapEntity then _hemd.MiniMapEntity:SetIcon(_ln5O.minimap) end MakeSnowCoveredPristine(_hemd) _hemd._pfpos = nil _hemd._ispathfinding = net_bool(_hemd.GUID, "_ispathfinding" , "onispathfindingdirty" ) _Na56(_hemd) _hemd:DoTaskInTime(0x0, _2Vjx) _hemd.OnRemoveEntity = _0NHl _hemd.entity:SetPristine() if not TheWorld.ismastersim then return _hemd end _hemd:DoTaskInTime(FRAMES, function() local _GqRW, y, z = _hemd:GetPosition():Get() if _GqRW == 0x0 and y == 0x0 and z == 0x0 and _hemd.dyc_ownerid == nil then _hemd:Remove() end end) _hemd.OnSave = _t5Dz _hemd.OnLoad = _IvUI if _aKns then _hemd.doortask = _hemd:DoPeriodicTask(0.25, function() _Wshp(_hemd) end) _hemd.doortask2 = _hemd:DoPeriodicTask(0x2 * FRAMES, function() _7epR(_hemd) end) end _hemd["dyccheckpostask".._xCI8] = _hemd:DoPeriodicTask(1.0, function() local _7kER = _hemd["dycfixedposition".._xCI8] local _79X8 = _hemd:GetPosition() if _7kER == nil then _hemd["dycfixedposition".._xCI8] = _79X8 end if _7kER and (_7kER.x ~= _79X8.x or _7kER.y ~= _79X8.y or _7kER.z ~= _79X8.z) then _hemd.Physics:Teleport(_7kER.x, _7kER.y, _7kER.z) end end) local _7DfP = _hemd.Remove _hemd.Remove = function(_pPME) if not _pPME["dycislastworkvalid".._xCI8] then end _7DfP(_pPME) end function _hemd:SetWallHeight(_sEG3) self.wallpercent = _sEG3 / 0x4 local _4PO3 = IsWaterWall(_hemd) self.AnimState:PlayAnimation(_G2MT(self), _4PO3) self.components.workable.workleft = math.floor(self.wallpercent * self.iniworkleft) self.workleft = self.components.workable.workleft end function _hemd:GetWallHeight() return self.workleft end function _hemd:DYCDestroyWall() self["dycislastworkvalid".._xCI8] = true self.components.workable.onfinish(self, self) end _hemd:AddComponent( "inspectable" ) _hemd.components.inspectable.descriptionfn = _7KvV _hemd:AddComponent( "lootdropper" ) _hemd:AddComponent( "combat" ) _hemd.components.combat.onhitfn = _r2q6 _hemd:AddComponent( "health" ) if TUNING.DYC_SUPERWALL_HEALTHMUL > 0x0 then _hemd.components.health:SetMaxHealth(_ln5O.hp * TUNING.DYC_SUPERWALL_HEALTHMUL) _hemd.components.health.currenthealth = _ln5O.hp * TUNING.DYC_SUPERWALL_HEALTHMUL else _hemd.components.health:SetMaxHealth(0x3e8) _hemd.components.health.currenthealth = 0x3e8 end _hemd.components.health.ondelta = _VrMJ _hemd.components.health.nofadeout = true _hemd.components.health.canheal = false _hemd:AddComponent( "workable" ) _hemd.components.workable:SetWorkAction(ACTIONS.HAMMER) _hemd.components.workable:SetWorkLeft(_hemd.iniworkleft) _hemd.components.workable:SetOnFinishCallback(_Dxbv) _hemd.components.workable:SetOnWorkCallback(_8Cn1) _hemd.components.workable.savestate = true MakeHauntableWork(_hemd) MakeSnowCovered(_hemd) return _hemd end return Prefab( "common/".._TH7s, _3TBu, _GAQr, _p9pS) end local function _Gmox(_RDhN, _bPx6) local _KFfD = "dyc_"..(_bPx6 and "door" or "wall" ).."_".._RDhN.."_item" local _tRKk = "dyc_"..(_bPx6 and "door" or "wall" ).."_".._RDhN local _VuGx = _ET9F[_RDhN] local _lbjc = _bPx6 and _VuGx.dooratlas or _VuGx.wallatlas local _UY2r = _bPx6 and _VuGx.doorimage or _VuGx.wallimage SuperWall.defaultImages[_KFfD] = {_lbjc, _UY2r..".tex" } local function _GLkV() local _UArD = CreateEntity() _UArD:AddTag( "wallbuilder" ) _UArD.entity:AddTransform() _UArD.entity:AddAnimState() _UArD.entity:AddNetwork() MakeInventoryPhysics(_UArD) _UArD.deployprefab = _tRKk _UArD.AnimState:SetBank(_VuGx.bank) _UArD.AnimState:SetBuild(_VuGx.build) _UArD.AnimState:PlayAnimation(_VuGx.itemanim) _UArD:DoTaskInTime(FRAMES, function() if _UArD.components and _UArD.components.inventoryitem and _UArD.components.inventoryitem.imagename ~= _UY2r then _UArD.components.inventoryitem.atlasname = nil _UArD:PushEvent( "imagechange" ) end if _UArD.replica and _UArD.replica.inventoryitem then _UArD:PushEvent( "imagechange" ) end end) _UArD.entity:SetPristine() if not TheWorld.ismastersim then return _UArD end _UArD:AddComponent( "stackable" ) _UArD.components.stackable.maxsize = TUNING.STACK_SIZE_MEDITEM _UArD:AddComponent( "inspectable" ) _UArD:AddComponent( "inventoryitem" ) _UArD.components.inventoryitem.atlasname = _lbjc _UArD.components.inventoryitem.imagename = _UY2r _UArD:AddComponent( "deployable" ) _UArD.components.deployable.ondeploy = _HyRg _UArD.components.deployable:SetDeployMode(DEPLOYMODE.WALL) _UArD.components.deployable.CanDeploy = function(_vCNJ, _sP4W, _ycKn) return _DlYB(_vCNJ.inst, _sP4W) end MakeHauntableLaunch(_UArD) return _UArD end return Prefab( "common/".._KFfD, _GLkV, _GAQr, _p9pS) end local function _fEil(_Q1lQ, _ue2n) _Q1lQ.wallpercent = _ue2n / 0x4 if _Q1lQ.ChangeWallColor then _Q1lQ:ChangeWallColor() else _Q1lQ.AnimState:PlayAnimation(_G2MT(_Q1lQ)) end end local function _XfA9(_utS2) local _zgYs = {} local _Q6fF = TUNING.DYC_SUPERWALL_WALLSETS[SuperWall.wallBuilderIndex] local _hwNR = _utS2.replica.inventory if _utS2 and _hwNR and _Q6fF then if _Q6fF.smartbuilder and _Q6fF.smartbuilder.walltype then local _nPlb = _wtD3(_Q6fF.smartbuilder.walltype) _zgYs[_nPlb.item] = {} _zgYs[_nPlb.item].count = 0x1 _zgYs[_nPlb.item].name = _nPlb.name if _Q6fF.smartbuilder.walltype2 then local _D8f3 = _wtD3(_Q6fF.smartbuilder.walltype2) if _zgYs[_D8f3.item] == nil then _zgYs[_D8f3.item] = {} end if _zgYs[_D8f3.item].count == nil then _zgYs[_D8f3.item].count = 0x0 end _zgYs[_D8f3.item].name = _D8f3.name end else for _oLjq, _JAWm in pairs(_Q6fF) do if type(_JAWm) == "table" and _JAWm.walltype then local _p4Bf = _wtD3(_JAWm.walltype) if _p4Bf and _p4Bf.item then if _zgYs[_p4Bf.item] == nil then _zgYs[_p4Bf.item] = {} end if _zgYs[_p4Bf.item].count == nil then _zgYs[_p4Bf.item].count = 0x1 else _zgYs[_p4Bf.item].count = _zgYs[_p4Bf.item].count + 0x1 end if _zgYs[_p4Bf.item].count2 == nil then _zgYs[_p4Bf.item].count2 = 0x0 end if _zgYs[_p4Bf.item].name == nil then _zgYs[_p4Bf.item].name = _p4Bf.name end end end end end for _uRX8, _QZFT in pairs(_zgYs) do local _VQI7, num = _hwNR:Has(_uRX8, _QZFT.count) _QZFT.count2 = num end return _zgYs end return _zgYs end local function _Al9h(_3zGw) for _oZOY, _7HSq in pairs(_3zGw) do if _7HSq.count2 < _7HSq.count then return false end end return true end local function _j3qm(_4IwG, _1nvN) if _1nvN == 0x1 then _4IwG = Vector3(_4IwG.z, _4IwG.y, - _4IwG.x) elseif _1nvN == 0x2 then _4IwG = Vector3( - _4IwG.x, _4IwG.y, - _4IwG.z) elseif _1nvN == 0x3 then _4IwG = Vector3( - _4IwG.z, _4IwG.y, _4IwG.x) end return _4IwG end local function _DvhH(_cl0x, _AOs0) local _yf0E = math.sqrt(_AOs0.x * _AOs0.x + _AOs0.y * _AOs0.y) + 0x1 local _c8bi = TheSim:FindEntities(_cl0x.x, _cl0x.y, _cl0x.z, _yf0E) local _goK2 = nil local _Avd1 = 0x1869f for _YDpQ, _e222 in pairs(_c8bi) do if _e222:HasTag( "superwall" ) and _e222:IsValid() then local _RgVV = math.abs(_e222:GetPosition().x - _cl0x.x) local _Ru0E = math.abs(_e222:GetPosition().z - _cl0x.z) if _RgVV < _Avd1 and _RgVV < _AOs0.x / 0x2 + 1.01 and _Ru0E < 0.01 then _Avd1 = _RgVV _goK2 = _e222 elseif _RgVV < 0.01 and _Ru0E < _Avd1 and _Ru0E < _AOs0.y / 0x2 + 1.01 then _Avd1 = _Ru0E _goK2 = _e222 end end end if _Avd1 > 0.99 then return _goK2 end return nil end local function _KzYY(_S2D3, _lmGo) local _VphQ = "build" _S2D3.wallbuildermode = _VphQ _S2D3.lastpos = _rbkv(_S2D3:GetPosition()) if _S2D3.dycswchildplacers == nil then _S2D3.dycswchildplacers = {} end for _i8J6, _yLWF in pairs(_S2D3.dycswchildplacers) do _yLWF:Remove() end _S2D3.dycswchildplacers = {} local _m8X5 = TUNING.DYC_SUPERWALL_WALLSETS[SuperWall.wallBuilderIndex] if _m8X5 == nil then print( "SuperWall: Failed to load wall set." ) return end local _mpBW = nil local _yfra = true if _lmGo and TUNING.DYC_SUPERWALL_SPECIALWALLSETS[_lmGo] then _m8X5 = TUNING.DYC_SUPERWALL_SPECIALWALLSETS[_lmGo] end if _m8X5.destroyer then _VphQ = "destroy" _S2D3.wallbuildermode = _VphQ local _Hoj6 = _S2D3:SpawnChild( "dyc_wallbuilderitem_placersquare" ) _Hoj6.AnimState:SetMultColour(0x1, 0x0, 0x0, 0.5) local _awE1 = _m8X5.destroyer.offset or Vector3(0x0, 0x0, 0x0) local _wNgB = _m8X5.destroyer.size or {x = 0x3, y = 0x3, } if SuperWall.wallBuilderRotation == 0x1 or SuperWall.wallBuilderRotation == 0x3 then _wNgB = {x = _wNgB.y, y = _wNgB.x, } end _awE1 = _j3qm(_awE1, SuperWall.wallBuilderRotation) _Hoj6.Transform:SetPosition(_awE1.x, _awE1.y, _awE1.z) _Hoj6.Transform:SetScale(math.sqrt(_wNgB.x * 0x3), 0x1, _wNgB.y * 0x3) if _wNgB.x >= 0x7 or _wNgB.y >= 0x7 then _Hoj6:SetSquare2() end table.insert(_S2D3.dycswchildplacers, _Hoj6) elseif _m8X5.heightbrush then _VphQ = "height" _S2D3.wallbuildermode = _VphQ local _9fNT = _m8X5.heightbrush.delta or 0x1 local _V3f8 = _S2D3:SpawnChild( "dyc_wallbuilderitem_placersquare" ) if _9fNT > 0x0 then _V3f8.AnimState:SetMultColour(0x0, 0x1, 0x0, 0.5) else _V3f8.AnimState:SetMultColour(0x0, 0x0, 0x1, 0.5) end local _NsMT = _m8X5.heightbrush.offset or Vector3(0x0, 0x0, 0x0) local _fHQ6 = _m8X5.heightbrush.size or {x = 0x3, y = 0x3, } if SuperWall.wallBuilderRotation == 0x1 or SuperWall.wallBuilderRotation == 0x3 then _fHQ6 = {x = _fHQ6.y, y = _fHQ6.x, } end _NsMT = _j3qm(_NsMT, SuperWall.wallBuilderRotation) _V3f8.Transform:SetPosition(_NsMT.x, _NsMT.y, _NsMT.z) _V3f8.Transform:SetScale(math.sqrt(_fHQ6.x * 0x3), 0x1, _fHQ6.y * 0x3) if _fHQ6.x >= 0x7 or _fHQ6.y >= 0x7 then _V3f8:SetSquare2() end table.insert(_S2D3.dycswchildplacers, _V3f8) elseif _m8X5.smartbuilder and _m8X5.smartbuilder.walltype and _wtD3(_m8X5.smartbuilder.walltype) then _VphQ = "smart" _S2D3.wallbuildermode = _VphQ local _UU0Q = _wtD3(_m8X5.smartbuilder.walltype) local _8hj4 = _m8X5.smartbuilder.walltype2 ~= nil and _wtD3(_m8X5.smartbuilder.walltype2) local _YM6c = _S2D3:SpawnChild( "dyc_wallbuilderitem_placersquare" ) _YM6c.AnimState:SetMultColour(0x1, 0x1, 0x1, 0.3) _YM6c.AnimState:SetLightOverride(0.5) local _g4jI = _m8X5.smartbuilder.offset or Vector3(0x0, 0x0, 0x0) local _1v6h = _m8X5.smartbuilder.size or {x = 0x3, y = 0x3, } if SuperWall.wallBuilderRotation == 0x1 or SuperWall.wallBuilderRotation == 0x3 then _1v6h = {x = _1v6h.y, y = _1v6h.x, } end _g4jI = _j3qm(_g4jI, SuperWall.wallBuilderRotation) _YM6c.Transform:SetPosition(_g4jI.x, _g4jI.y, _g4jI.z) _YM6c.Transform:SetScale(math.sqrt(_1v6h.x * 0x3), 0x1, _1v6h.y * 0x3) if _1v6h.x >= 0x7 or _1v6h.y >= 0x7 then _YM6c:SetSquare2() end table.insert(_S2D3.dycswchildplacers, _YM6c) _YM6c = _S2D3:SpawnChild(_UU0Q.placerprefab) _YM6c.dyc_noplacerpostinit = true if _YM6c.components.placer then _YM6c:RemoveComponent( "placer" ) end _YM6c.Transform:SetPosition(_g4jI.x, _g4jI.y, _g4jI.z) local _LSaF = _YM6c local _9swo = nil if _UU0Q.userotation and _YM6c.FixUpFenceOrientation then local _MA1C, tempy, tempz = _YM6c.Transform:GetWorldPosition() local _QIgL = TheSim:FindEntities(_MA1C, 0x0, tempz, 1.5, { "wall" }) if _QIgL and _QIgL[0x1] == nil and TheCamera and TheCamera.headingtarget then local _XAD1 = TheCamera.headingtarget if math.abs((_XAD1 + 0x2d) % 0x5a) < 0x1 or math.abs((_XAD1 + 0x2d) % 0x5a - 0x5a) < 0x1 then _YM6c:FixUpFenceOrientation(_XAD1 + 0x5a) else _YM6c:FixUpFenceOrientation(_XAD1) end else _YM6c:FixUpFenceOrientation(nil) end _S2D3.rotationtobepassed = _YM6c.Transform:GetRotation() end local _5T4j = _m8X5.smartbuilder.height or 0x4 _5T4j = _Gcvk(_5T4j + SuperWall.wallBuilderHeightAdjustment, 0x1, 0x4) _fEil(_YM6c, _5T4j) if _YM6c.wallcolor and _YM6c.GetAnimState then _YM6c:GetAnimState():SetMultColour(_YM6c.wallcolor.r, _YM6c.wallcolor.g, _YM6c.wallcolor.b, 0.5) else _YM6c.AnimState:SetMultColour(0x1, 0x1, 0x1, 0.5) end table.insert(_S2D3.dycswchildplacers, _YM6c) local _6d2T = _S2D3:GetPosition() + _g4jI local _jd2T = _DvhH(_6d2T, _1v6h) if _jd2T then local _KIuc = _jd2T:GetPosition().x - _6d2T.x local _TvQP = _jd2T:GetPosition().z - _6d2T.z local _U4sy = math.abs(_KIuc) local _VEvI = math.abs(_TvQP) if _8hj4 then _5T4j = _m8X5.smartbuilder.height2 or _m8X5.smartbuilder.height or 0x4 _5T4j = _Gcvk(_5T4j + SuperWall.wallBuilderHeightAdjustment, 0x1, 0x4) _UU0Q = _8hj4 end if _U4sy < 0.01 and _VEvI > 1.99 then local _XHVA = _e42e(_VEvI - 0x1) _mpBW = _XfA9(ThePlayer) _mpBW[_UU0Q.item].count = _mpBW[_UU0Q.item].count + _XHVA _yfra = _Al9h(_mpBW) for _1em2 = 0x1, _XHVA do _YM6c = _S2D3:SpawnChild(_UU0Q.placerprefab) _YM6c.dyc_noplacerpostinit = true if _YM6c.components.placer then _YM6c:RemoveComponent( "placer" ) end if _TvQP > 0x0 then _YM6c.Transform:SetPosition(_g4jI.x, _g4jI.y, _g4jI.z + _1em2) else _YM6c.Transform:SetPosition(_g4jI.x, _g4jI.y, _g4jI.z - _1em2) end if _UU0Q.userotation and _YM6c.FixUpFenceOrientation then _YM6c:FixUpFenceOrientation(0x0) end _fEil(_YM6c, _5T4j) if _YM6c.wallcolor and _YM6c.GetAnimState then _YM6c:GetAnimState():SetMultColour(_YM6c.wallcolor.r, _YM6c.wallcolor.g, _YM6c.wallcolor.b, 0.5) else _YM6c.AnimState:SetMultColour(0x1, 0x1, 0x1, 0.5) end table.insert(_S2D3.dycswchildplacers, _YM6c) _9swo = 0x0 end elseif _VEvI < 0.01 and _U4sy > 1.99 then local _X1I5 = _e42e(_U4sy - 0x1) _mpBW = _XfA9(ThePlayer) _mpBW[_UU0Q.item].count = _mpBW[_UU0Q.item].count + _X1I5 _yfra = _Al9h(_mpBW) for _ANfJ = 0x1, _X1I5 do _YM6c = _S2D3:SpawnChild(_UU0Q.placerprefab) _YM6c.dyc_noplacerpostinit = true if _YM6c.components.placer then _YM6c:RemoveComponent( "placer" ) end if _KIuc > 0x0 then _YM6c.Transform:SetPosition(_g4jI.x + _ANfJ, _g4jI.y, _g4jI.z) else _YM6c.Transform:SetPosition(_g4jI.x - _ANfJ, _g4jI.y, _g4jI.z) end if _UU0Q.userotation and _YM6c.FixUpFenceOrientation then _YM6c:FixUpFenceOrientation(0x5a) end _fEil(_YM6c, _5T4j) if _YM6c.wallcolor and _YM6c.GetAnimState then _YM6c:GetAnimState():SetMultColour(_YM6c.wallcolor.r, _YM6c.wallcolor.g, _YM6c.wallcolor.b, 0.5) else _YM6c.AnimState:SetMultColour(0x1, 0x1, 0x1, 0.5) end table.insert(_S2D3.dycswchildplacers, _YM6c) _9swo = 0x5a end else _mpBW = _XfA9(ThePlayer) _yfra = _Al9h(_mpBW) end else _mpBW = _XfA9(ThePlayer) _yfra = _Al9h(_mpBW) end if _9swo and _9swo ~= _S2D3.rotationtobepassed and _LSaF and _LSaF.FixUpFenceOrientation then _S2D3.rotationtobepassed = _9swo _LSaF:FixUpFenceOrientation(_9swo) end else _mpBW = _XfA9(ThePlayer) _yfra = _Al9h(_mpBW) for _Hh1i, _ne1C in pairs(_m8X5) do if type(_ne1C) == "table" and _ne1C.walltype then local _TXhb = _wtD3(_ne1C.walltype) if _TXhb then local _AGxC = _S2D3:SpawnChild(_TXhb.placerprefab) _AGxC.dyc_noplacerpostinit = true if _AGxC.components.placer then _AGxC:RemoveComponent( "placer" ) end if _ne1C.offset then local _St6L = _ne1C.offset if _m8X5.pivot then _St6L = _St6L - _m8X5.pivot end _St6L = _j3qm(_St6L, SuperWall.wallBuilderRotation) _AGxC.Transform:SetPosition(_St6L.x, _St6L.y, _St6L.z) end if _TXhb.userotation and _AGxC.FixUpFenceOrientation then local _rB2F = _ne1C.rotation or 0x0 _rB2F = _rB2F + SuperWall.wallBuilderRotation * 0x5a _AGxC:FixUpFenceOrientation(_rB2F, _ne1C.isswingright) end local _wCo2 = _ne1C.height or 0x4 _fEil(_AGxC, _Gcvk(_wCo2 + SuperWall.wallBuilderHeightAdjustment, 0x1, 0x4)) if _AGxC.wallcolor and _AGxC.GetAnimState then _AGxC:GetAnimState():SetMultColour(_AGxC.wallcolor.r, _AGxC.wallcolor.g, _AGxC.wallcolor.b, 0.5) else _AGxC.AnimState:SetMultColour(0x1, 0x1, 0x1, 0.5) end table.insert(_S2D3.dycswchildplacers, _AGxC) end end end end local _WUph = _m8X5.name or "???" if _m8X5.names and SuperWall.R2L[TUNING.DYC_SUPERWALL_LANGUAGE] and _m8X5.names[SuperWall.R2L[TUNING.DYC_SUPERWALL_LANGUAGE ]] then _WUph = _m8X5.names[SuperWall.R2L[TUNING.DYC_SUPERWALL_LANGUAGE ]] end if _WUph then if TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == true then _S2D3.Label:SetColour(0x1, 0x1, 0x1) else if _yfra then _S2D3.Label:SetColour(0.5, 0x1, 0.5) else _S2D3.Label:SetColour(0x1, 0.1, 0.1) end end local _ZT0N = TUNING.DYC_SUPERWALL_STRINGS.fastbuild.."\n" _ZT0N = _ZT0N..SuperWall.wallBuilderIndex.."/"..#TUNING.DYC_SUPERWALL_WALLSETS.."   ".._WUph _ZT0N = _ZT0N.."   ("..TUNING.DYC_SUPERWALL_STRINGS.rotation..":"..string.format( "%d" , SuperWall.wallBuilderRotation * 0x5a)..TUNING.DYC_SUPERWALL_STRINGS.degrees..")" if(_VphQ == "build" or _VphQ == "smart" ) then local _MnuS = (SuperWall.wallBuilderHeightAdjustment > 0x0 and "+" ) or "" _ZT0N = _ZT0N.."   ("..TUNING.DYC_SUPERWALL_STRINGS.heightadjustment..":".._MnuS..SuperWall.wallBuilderHeightAdjustment..")" if _yfra then _ZT0N = _ZT0N.."   "..TUNING.DYC_SUPERWALL_STRINGS.readytobuild else _ZT0N = _ZT0N.."   "..TUNING.DYC_SUPERWALL_STRINGS.insufficientwallitem end _ZT0N = _ZT0N.."\n"..TUNING.DYC_SUPERWALL_STRINGS.requiredmaterials for _PtRd, _7kBr in pairs(_mpBW) do if TUNING.DYC_SUPERWALL_STRINGS[_7kBr.name] then _ZT0N = _ZT0N..TUNING.DYC_SUPERWALL_STRINGS[_7kBr.name].name.."(".._7kBr.count2.."/".._7kBr.count..") " end end end local _Dgng = _m8X5.description or nil if _m8X5.descriptions and SuperWall.R2L[TUNING.DYC_SUPERWALL_LANGUAGE] and _m8X5.descriptions[SuperWall.R2L[TUNING.DYC_SUPERWALL_LANGUAGE ]] then _Dgng = _m8X5.descriptions[SuperWall.R2L[TUNING.DYC_SUPERWALL_LANGUAGE ]] end if _Dgng then _ZT0N = _ZT0N.."\n".._Dgng end _ZT0N = _ZT0N.."\n  \n  \n  \n  \n  \n  \n  \n  \n  " _S2D3.Label:SetText(_ZT0N) end end local function _RDrg(_pwVV, _Z9Q8) local _IalR = _pwVV.components.inventory if _IalR == nil then return nil end for _QUZE, _8n58 in pairs(_IalR.itemslots) do if _8n58.components.inventoryitem and _8n58.prefab == _Z9Q8 then return _8n58 end end for _UYIl, _a7zP in pairs(_IalR.equipslots) do if _a7zP.components.inventoryitem and _a7zP.components.container then for _Gizv, _BTyq in pairs(_a7zP.components.container.slots) do if _BTyq.components.inventoryitem and _BTyq.prefab == _Z9Q8 then return _BTyq end end end end end local function _BJ2Q(_MSF6, _9TLT, _rThE, _ItwA, _XKV2, _JaBz) print(_MSF6) local _K0q6 = "build" _9TLT = _rbkv(_9TLT) local _vJdz = _rThE.dycsw_wallbuilderindex or 0x1 local _uovb = TUNING.DYC_SUPERWALL_WALLSETS[_vJdz] local _tLmq = 0x0 local _wQyX = 0x0 if _XKV2 and TUNING.DYC_SUPERWALL_SPECIALWALLSETS[_XKV2] then _uovb = TUNING.DYC_SUPERWALL_SPECIALWALLSETS[_XKV2] elseif _JaBz then _uovb = _JaBz end if _uovb == nil then print( "SuperWall: Failed to load wall set." ) return end if _uovb.destroyer then _K0q6 = "destroy" local _a5Xi = _uovb.destroyer.offset or Vector3(0x0, 0x0, 0x0) local _x7C1 = _uovb.destroyer.size or {x = 0x3, y = 0x3, } local _YagL = _rThE.dycsw_wallbuilderrotation or 0x0 if _YagL == 0x1 or _YagL == 0x3 then _x7C1 = {x = _x7C1.y, y = _x7C1.x, } end _a5Xi = _j3qm(_a5Xi, _YagL) local _qfvi = math.sqrt(_x7C1.x * _x7C1.x + _x7C1.y * _x7C1.y) + 0x1 local _DPxR = _9TLT + _a5Xi local _PSjt = TheSim:FindEntities(_DPxR.x, _DPxR.y, _DPxR.z, _qfvi) for _7uhm, _xEG3 in pairs(_PSjt) do if _xEG3:HasTag( "superwall" ) and _xEG3:IsValid() and _xEG3.DYCDestroyWall and _Tr3P(_xEG3, _rThE) then local _MOzP = _xEG3:GetPosition() if math.abs(_DPxR.x - _MOzP.x) < _x7C1.x / 0x2 + 0.01 and math.abs(_DPxR.z - _MOzP.z) < _x7C1.y / 0x2 + 0.01 then _xEG3:DYCDestroyWall() _tLmq = _tLmq + 0x1 end end end elseif _uovb.heightbrush then _K0q6 = "height" local _dhIy = _uovb.heightbrush.delta or 0x1 local _glKu = _uovb.heightbrush.offset or Vector3(0x0, 0x0, 0x0) local _iTVn = _uovb.heightbrush.size or {x = 0x3, y = 0x3, } local _pdXQ = _rThE.dycsw_wallbuilderrotation or 0x0 if _pdXQ == 0x1 or _pdXQ == 0x3 then _iTVn = {x = _iTVn.y, y = _iTVn.x, } end _glKu = _j3qm(_glKu, _pdXQ) local _sQhs = math.sqrt(_iTVn.x * _iTVn.x + _iTVn.y * _iTVn.y) + 0x1 local _VEkd = _9TLT + _glKu local _0qDu = TheSim:FindEntities(_VEkd.x, _VEkd.y, _VEkd.z, _sQhs) for _Dn9M, _QQfv in pairs(_0qDu) do if _QQfv:HasTag( "superwall" ) and _QQfv:IsValid() and _QQfv.GetWallHeight and _QQfv.SetWallHeight and _Tr3P(_QQfv, _rThE) then local _g9KE = _QQfv:GetPosition() if math.abs(_VEkd.x - _g9KE.x) < _iTVn.x / 0x2 + 0.01 and math.abs(_VEkd.z - _g9KE.z) < _iTVn.y / 0x2 + 0.01 then _QQfv:SetWallHeight(_Gcvk(_QQfv:GetWallHeight() + _dhIy, 0x1, 0x4)) _tLmq = _tLmq + 0x1 end end end elseif _uovb.smartbuilder and _uovb.smartbuilder.walltype and _wtD3(_uovb.smartbuilder.walltype) then _K0q6 = "smart" local _hZlo = _wtD3(_uovb.smartbuilder.walltype) local _I36t = _uovb.smartbuilder.walltype2 ~= nil and _wtD3(_uovb.smartbuilder.walltype2) local _RZK5 = _uovb.smartbuilder.offset or Vector3(0x0, 0x0, 0x0) local _Gg3J = _uovb.smartbuilder.size or {x = 0x3, y = 0x3, } local _7EI0 = _rThE.dycsw_wallbuilderrotation or 0x0 if _7EI0 == 0x1 or _7EI0 == 0x3 then _Gg3J = {x = _Gg3J.y, y = _Gg3J.x, } end _RZK5 = _j3qm(_RZK5, _7EI0) local _Sq04 = math.sqrt(_Gg3J.x * _Gg3J.x + _Gg3J.y * _Gg3J.y) + 0x1 local _UjHI = _9TLT + _RZK5 local _8BKt = _uovb.smartbuilder.height or 0x4 local _fNk6 = _rThE.dycsw_wallbuilderheight or 0x0 _8BKt = _Gcvk(_8BKt + _fNk6, 0x1, 0x4) local _s6E6 = _DvhH(_UjHI, _Gg3J) if _s6E6 then local _tjMN = _s6E6:GetPosition().x - _UjHI.x local _MdfJ = _s6E6:GetPosition().z - _UjHI.z local _XGyM = math.abs(_tjMN) local _BUV0 = math.abs(_MdfJ) local _8qDz = _8BKt if _I36t and _uovb.smartbuilder.height2 then _8qDz = _uovb.smartbuilder.height2 _8qDz = _Gcvk(_8qDz + _fNk6, 0x1, 0x4) end if _XGyM < 0.01 then local _wxvp = _e42e(_BUV0) for _pr02 = 0x1, _wxvp do _tLmq = _tLmq + 0x1 local _67qa = nil if _MdfJ > 0x0 then _67qa = Vector3(_UjHI.x, _UjHI.y, _UjHI.z + (_pr02 - 0x1)) else _67qa = Vector3(_UjHI.x, _UjHI.y, _UjHI.z - (_pr02 - 0x1)) end if _pr02 > 0x1 and _I36t then _8BKt = _8qDz _hZlo = _I36t end if _DlYB(_MSF6, _67qa, _hZlo.prefab) then local _9LGI = SpawnPrefab(_hZlo.prefab) local _OmsQ = _RDrg(_rThE, _hZlo.item) if _9LGI and (TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == true or _OmsQ ~= nil) then if TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == false and _OmsQ ~= nil then if _OmsQ.components.stackable then _OmsQ.components.stackable:Get():Remove() else _OmsQ:Remove() end end _wQyX = _wQyX + 0x1 _9LGI.Physics:SetCollides(false) _9LGI.Physics:Teleport(_67qa.x, _67qa.y, _67qa.z) _9LGI["dycfixedposition".._xCI8] = _9LGI:GetPosition() _9LGI.Physics:SetCollides(true) TheWorld.Pathfinder:AddWall(_67qa.x, 0x0, _67qa.z) _9LGI.dyc_ownerid = _rThE.userid _9LGI:SetWallHeight(_8BKt) if _hZlo.userotation and _9LGI.FixUpFenceOrientation then _9LGI:FixUpFenceOrientation(0x0) end elseif _9LGI then _9LGI:Remove() end end end else local _d7VC = _e42e(_XGyM) for _d82v = 0x1, _d7VC do _tLmq = _tLmq + 0x1 local _2u7c = nil if _tjMN > 0x0 then _2u7c = Vector3(_UjHI.x + (_d82v - 0x1), _UjHI.y, _UjHI.z) else _2u7c = Vector3(_UjHI.x - (_d82v - 0x1), _UjHI.y, _UjHI.z) end if _d82v > 0x1 and _I36t then _8BKt = _8qDz _hZlo = _I36t end if _DlYB(_MSF6, _2u7c, _hZlo.prefab) then local _CfJ5 = SpawnPrefab(_hZlo.prefab) local _Yxyv = _RDrg(_rThE, _hZlo.item) if _CfJ5 and (TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == true or _Yxyv ~= nil) then if TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == false and _Yxyv ~= nil then if _Yxyv.components.stackable then _Yxyv.components.stackable:Get():Remove() else _Yxyv:Remove() end end _wQyX = _wQyX + 0x1 _CfJ5.Physics:SetCollides(false) _CfJ5.Physics:Teleport(_2u7c.x, _2u7c.y, _2u7c.z) _CfJ5["dycfixedposition".._xCI8] = _CfJ5:GetPosition() _CfJ5.Physics:SetCollides(true) TheWorld.Pathfinder:AddWall(_2u7c.x, 0x0, _2u7c.z) _CfJ5.dyc_ownerid = _rThE.userid _CfJ5:SetWallHeight(_8BKt) if _hZlo.userotation and _CfJ5.FixUpFenceOrientation then _CfJ5:FixUpFenceOrientation(0x5a) end elseif _CfJ5 then _CfJ5:Remove() end end end end else _tLmq = 0x1 if _DlYB(_MSF6, _UjHI, _hZlo.prefab) then local _nnN0 = SpawnPrefab(_hZlo.prefab) local _pxMZ = _RDrg(_rThE, _hZlo.item) if _nnN0 and (TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == true or _pxMZ ~= nil) then if TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == false and _pxMZ ~= nil then if _pxMZ.components.stackable then _pxMZ.components.stackable:Get():Remove() else _pxMZ:Remove() end end _wQyX = 0x1 _nnN0.Physics:SetCollides(false) _nnN0.Physics:Teleport(_UjHI.x, _UjHI.y, _UjHI.z) _nnN0["dycfixedposition".._xCI8] = _nnN0:GetPosition() _nnN0.Physics:SetCollides(true) TheWorld.Pathfinder:AddWall(_UjHI.x, 0x0, _UjHI.z) _nnN0.dyc_ownerid = _rThE.userid _nnN0:SetWallHeight(_8BKt) if _ItwA and _hZlo.userotation and _nnN0.FixUpFenceOrientation then _nnN0:FixUpFenceOrientation(_ItwA) end elseif _nnN0 then _nnN0:Remove() end end end else for _ommW, _8Wvy in pairs(_uovb) do if type(_8Wvy) == "table" and _8Wvy.walltype then local _M2lr = _wtD3(_8Wvy.walltype) local _zFaL = Vector3(0x0, 0x0, 0x0) if _8Wvy.offset then _zFaL = _8Wvy.offset if _uovb.pivot then _zFaL = _zFaL - _uovb.pivot end local _9oH3 = _rThE.dycsw_wallbuilderrotation or 0x0 _zFaL = _j3qm(_zFaL, _9oH3) end local _bKUq = _9TLT + _zFaL if _M2lr then _tLmq = _tLmq + 0x1 end if _M2lr and _DlYB(_MSF6, _bKUq, _M2lr.prefab) then local _Y7D0 = SpawnPrefab(_M2lr.prefab) local _u5mP = _RDrg(_rThE, _M2lr.item) if _Y7D0 and (TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == true or _u5mP ~= nil) then if TUNING.DYC_SUPERWALL_WALLSETNOCONSUMPTION == false and _u5mP ~= nil then if _u5mP.components.stackable then _u5mP.components.stackable:Get():Remove() else _u5mP:Remove() end end _wQyX = _wQyX + 0x1 _Y7D0.Physics:SetCollides(false) _Y7D0.Physics:Teleport(_bKUq.x, _bKUq.y, _bKUq.z) _Y7D0["dycfixedposition".._xCI8] = _Y7D0:GetPosition() _Y7D0.Physics:SetCollides(true) TheWorld.Pathfinder:AddWall(_bKUq.x, 0x0, _bKUq.z) _Y7D0.dyc_ownerid = _rThE.userid local _vchP = _8Wvy.height or 0x4 local _hleP = _rThE.dycsw_wallbuilderheight or 0x0 _Y7D0:SetWallHeight(_Gcvk(_vchP + _hleP, 0x1, 0x4)) if _M2lr.userotation and _Y7D0.FixUpFenceOrientation then local _Ult5 = (_rThE.dycsw_wallbuilderrotation or 0x0) * 0x5a _Ult5 = _Ult5 + (_8Wvy.rotation or 0x0) _Y7D0:FixUpFenceOrientation(_Ult5, _8Wvy.isswingright) end elseif _Y7D0 then _Y7D0:Remove() end end end end end if(_K0q6 == "build" or _K0q6 == "smart" ) and _tLmq > 0x0 and _rThE.components.talker then local _mg6R = _rThE.components.talker local _nb0b = "" if _wQyX == 0x0 then _nb0b = TUNING.DYC_SUPERWALL_STRINGS.buildingcomplete3 elseif _wQyX < _tLmq then _nb0b = TUNING.DYC_SUPERWALL_STRINGS.buildingcomplete2 else _nb0b = TUNING.DYC_SUPERWALL_STRINGS.buildingcomplete1 end _MSF6:DoTaskInTime(0x4 * FRAMES, function() _mg6R:Say(_nb0b, 0x4) end) elseif _K0q6 == "destroy" and _rThE.components.talker then local _0SXN = _rThE.components.talker local _B68a = "" if _tLmq > 0x0 then _B68a = TUNING.DYC_SUPERWALL_STRINGS.walldestroyed1 else _B68a = TUNING.DYC_SUPERWALL_STRINGS.walldestroyed2 end _MSF6:DoTaskInTime(0x4 * FRAMES, function() _0SXN:Say(_B68a, 0x4) end) elseif _K0q6 == "height" and _rThE.components.talker then local _tFeQ = _rThE.components.talker local _QF5w = "" if _tLmq > 0x0 then _QF5w = TUNING.DYC_SUPERWALL_STRINGS.wallheightchanged1 else _QF5w = TUNING.DYC_SUPERWALL_STRINGS.wallheightchanged2 end _MSF6:DoTaskInTime(0x5 * FRAMES, function() _tFeQ:Say(_QF5w, 0x4) end) end _MSF6:DoTaskInTime(0x4 * FRAMES, function() if _rThE.components.inventory and _MSF6.components.inventoryitem and _MSF6.components.inventoryitem.owner == nil then _rThE.components.inventory:GiveActiveItem(_MSF6) end end) end local function _yuEY(_j1j0, _qZeR) return true end local function _bVMs() local _ekZN = CreateEntity() _ekZN:AddTag( "FX" ) _ekZN.entity:SetCanSleep(false) _ekZN.persists = false _ekZN.entity:AddTransform() _ekZN.entity:AddAnimState() _ekZN.AnimState:SetBank( "hammer" ) _ekZN.AnimState:SetBuild( "hammer" ) _ekZN.AnimState:PlayAnimation( "idle" ) _ekZN.Transform:SetScale(0.85, 0.85, 0.85) return _ekZN end local function _pDnl() local _ndwp = CreateEntity() _ndwp:AddTag( "wallbuilder" ) _ndwp.entity:AddTransform() _ndwp.entity:AddAnimState() _ndwp.entity:AddNetwork() MakeInventoryPhysics(_ndwp) _ndwp:AddTag( "superwallfastbuilder" ) _ndwp.AnimState:SetBank( "wall" ) _ndwp.AnimState:SetBuild( "wall_stone" ) _ndwp.AnimState:PlayAnimation( "idle" ) _ndwp:SpawnChild( "dyc_wallbuilderitemchild" ).Transform:SetPosition(0x0, 0.5, 0x0) _ndwp.Transform:SetScale(0.85, 0.85, 0.85) _ndwp.entity:SetPristine() if not TheWorld.ismastersim then return _ndwp end _ndwp:AddComponent( "inspectable" ) _ndwp:AddComponent( "inventoryitem" ) _ndwp.components.inventoryitem.atlasname = "images/inventoryimages/wallbuilder.xml" _ndwp.components.inventoryitem.imagename = "wallbuilder" _ndwp:AddComponent( "deployable" ) _ndwp.components.deployable.ondeploy = _HyRg _ndwp.components.deployable:SetDeployMode(DEPLOYMODE.WALL) _ndwp.components.deployable.CanDeploy = function(_gNpQ, _lJt2, _Hc28) return _yuEY(_gNpQ.inst, _lJt2) end _ndwp.components.deployable.ondeploy = _BJ2Q _ndwp:AddComponent( "fuel" ) _ndwp.components.fuel.fuelvalue = TUNING.MED_FUEL MakeHauntableLaunch(_ndwp) return _ndwp end local function _J6wM(_2q9H, _2VLF) SuperWall.wallBuilderIndex = SuperWall.wallBuilderIndex - 0x1 if SuperWall.wallBuilderIndex < 0x1 then SuperWall.wallBuilderIndex = #TUNING.DYC_SUPERWALL_WALLSETS end SuperWall.SetWallBuilderIndex(SuperWall.wallBuilderIndex) _KzYY(_2q9H, _2VLF) end local function _Psg4(_gtKf, _E3TN) SuperWall.wallBuilderIndex = SuperWall.wallBuilderIndex + 0x1 if SuperWall.wallBuilderIndex > #TUNING.DYC_SUPERWALL_WALLSETS then SuperWall.wallBuilderIndex = 0x1 end SuperWall.SetWallBuilderIndex(SuperWall.wallBuilderIndex) _KzYY(_gtKf, _E3TN) end local function _KxGB(_CUVc, _s1ds) SuperWall.wallBuilderRotation = SuperWall.wallBuilderRotation + 0x1 if SuperWall.wallBuilderRotation >= 0x4 then SuperWall.wallBuilderRotation = 0x0 end SuperWall.SetWallBuilderRatation(SuperWall.wallBuilderRotation) _KzYY(_CUVc, _s1ds) end local function _hLs6(_eZxu, _bTa2) if SuperWall.wallBuilderHeightAdjustment < 0x3 then SuperWall.wallBuilderHeightAdjustment = SuperWall.wallBuilderHeightAdjustment + 0x1 end SuperWall.SetWallBuilderHeight(SuperWall.wallBuilderHeightAdjustment) _KzYY(_eZxu, _bTa2) end local function _CzVo(_BWDP, _mScE) if SuperWall.wallBuilderHeightAdjustment > - 0x3 then SuperWall.wallBuilderHeightAdjustment = SuperWall.wallBuilderHeightAdjustment - 0x1 end SuperWall.SetWallBuilderHeight(SuperWall.wallBuilderHeightAdjustment) _KzYY(_BWDP, _mScE) end local function _UHfh(_aJmY) local _oYXF = ThePlayer TheCamera.ZoomIn = _aJmY.oldcamerazoomin TheCamera.ZoomOut = _aJmY.oldcamerazoomout ThePlayer.components.playercontroller.OnRightClick = _aJmY.oldonrightclick if _aJmY.oldrightclick then _oYXF.components.playeractionpicker.GetRightClickActions = _aJmY.oldrightclick end if _aJmY.dycdummyplacertask then _aJmY.dycdummyplacertask:Cancel() end SuperWall.PreviousWallSet = nil SuperWall.NextWallSet = nil SuperWall.RotateWallSet = nil SuperWall.IncreaseWallSetHeight = nil SuperWall.DecreaseWallSetHeight = nil end local function _aObP(_GzL0, _wN8d, _8GKG) _8GKG = nil if _GzL0.rightclickoverride ~= nil then local _xyfy, usedefault = _GzL0.rightclickoverride(_GzL0.inst, _8GKG, _wN8d) if not usedefault or (_xyfy ~= nil and #_xyfy > 0x0) then return _xyfy or {} end end local _IYlG = nil local _UptC = _GzL0.inst.replica.inventory:GetActiveItem() local _HmOO = _GzL0.inst.replica.inventory:GetEquippedItem(EQUIPSLOTS.HANDS) local _LpoX = true if _8GKG ~= nil and _GzL0.containers[_8GKG] then _IYlG = _GzL0:GetSceneActions(_8GKG, true) elseif _UptC ~= nil then if _UptC:IsValid() then if _8GKG == _GzL0.inst then _IYlG = _GzL0:GetInventoryActions(_UptC, true) elseif _8GKG ~= nil then _IYlG = _GzL0:GetUseItemActions(_8GKG, _UptC, true) elseif _LpoX then _IYlG = _GzL0:GetPointActions(_wN8d, _UptC, true) end end elseif _8GKG ~= nil then if _HmOO ~= nil and _HmOO:IsValid() then _IYlG = _GzL0:GetEquippedItemActions(_8GKG, _HmOO, true) end if _IYlG == nil or #_IYlG == 0x0 then _IYlG = _GzL0:GetSceneActions(_8GKG, true) end elseif _HmOO ~= nil and _HmOO:IsValid() and _LpoX then _IYlG = _GzL0:GetPointActions(_wN8d, _HmOO, true) end return _IYlG or {} end local function _UXjX() local _glih = CreateEntity() _glih:AddTag( "FX" ) _glih.entity:SetCanSleep(false) _glih.persists = false _glih.entity:AddTransform() _glih.entity:AddAnimState() _glih.AnimState:SetBank( "dyc_superwall" ) _glih.AnimState:SetBuild( "dyc_square" ) _glih.AnimState:PlayAnimation( "idle" ) _glih.AnimState:SetMultColour(0x1, 0x1, 0x1, 0.5) _glih.AnimState:SetLightOverride(0x1) _glih.AnimState:SetOrientation(ANIM_ORIENTATION.OnGround) _glih.AnimState:SetLayer(LAYER_BACKGROUND) _glih.AnimState:SetSortOrder(0x3) _glih.Transform:SetScale(0x2, 0x2, 0x2) function _glih:SetSquare2() self.AnimState:SetBank( "dyc_superwall" ) self.AnimState:SetBuild( "dyc_square2" ) self.AnimState:PlayAnimation( "idle" ) end return _glih end local function _JbjE() local _8PA0 = CreateEntity() _8PA0:AddTag( "FX" ) _8PA0.entity:SetCanSleep(false) _8PA0.persists = false _8PA0.entity:AddTransform() _8PA0.entity:AddAnimState() _8PA0.entity:AddLabel() _8PA0.Label:SetFont(NUMBERFONT) _8PA0.Label:SetFontSize(0x16) _8PA0.Label:SetColour(0x1, 0x1, 0x1) _8PA0.Label:SetText( " " ) _8PA0.Label:Enable(true) _8PA0:AddComponent( "placer" ) _8PA0.components.placer.snaptogrid = false _8PA0.components.placer.snap_to_meters = true _8PA0.components.placer.fixedcameraoffset = nil _8PA0.components.placer.onground = nil _KzYY(_8PA0, nil) local _Sy7m = nil SuperWall.PreviousWallSet = function() _J6wM(_8PA0, _Sy7m) end SuperWall.NextWallSet = function() _Psg4(_8PA0, _Sy7m) end SuperWall.RotateWallSet = function() _KxGB(_8PA0, _Sy7m) end SuperWall.IncreaseWallSetHeight = function() _hLs6(_8PA0, _Sy7m) end SuperWall.DecreaseWallSetHeight = function() _CzVo(_8PA0, _Sy7m) end local _CF5q = ThePlayer _8PA0.dycismidmouseup = true _8PA0.dycisrightmouseup = true _8PA0.dycisaltdown = false _8PA0.dycdummyplacertask = _8PA0:DoPeriodicTask(FRAMES, function() if TheSim:IsKeyDown(KEY_ALT) then _Sy7m = 0x1 if not _8PA0.dycisaltdown then _KzYY(_8PA0, _Sy7m) end _8PA0.dycisaltdown = true else _Sy7m = nil if _8PA0.dycisaltdown then _KzYY(_8PA0, _Sy7m) end _8PA0.dycisaltdown = false end if TheSim:GetMouseButtonState(MOUSEBUTTON_RIGHT) then if _8PA0.dycisrightmouseup then local _fjsj = _CF5q local _9tBS = TheInput:GetWorldPosition() local _sWWJ = TheInput:GetHUDEntityUnderMouse() if _sWWJ == nil then local _orrw = SuperWall.wallBuilderIndex local _Pe6S = TUNING.DYC_SUPERWALL_WALLSETS[_orrw] if _Pe6S and _Pe6S.iscustom and _Sy7m == nil then SuperWall.BuildCustomWallSet(_9tBS.x, _9tBS.z, _8PA0.rotationtobepassed, _Pe6S) else SuperWall.BuildWallSet(_9tBS.x, _9tBS.z, _8PA0.rotationtobepassed, _Sy7m) end _8PA0:DoTaskInTime(0.15, function() if _8PA0 and _8PA0:IsValid() then _KzYY(_8PA0, _Sy7m) end end) end end _8PA0.dycisrightmouseup = false else _8PA0.dycisrightmouseup = true end if TheSim:GetMouseButtonState(MOUSEBUTTON_MIDDLE) then if _8PA0.dycismidmouseup then _KxGB(_8PA0, _Sy7m) end _8PA0.dycismidmouseup = false else _8PA0.dycismidmouseup = true end if TheSim:GetDigitalControl(CONTROL_ZOOM_OUT) then _Psg4(_8PA0, _Sy7m) elseif TheSim:GetDigitalControl(CONTROL_ZOOM_IN) then _J6wM(_8PA0, _Sy7m) end local _gZE1, dy, dz = (_8PA0.lastpos - _rbkv(_8PA0:GetPosition())):Get() if _8PA0.wallbuildermode == "smart" and (_gZE1 ~= 0x0 or dz ~= 0x0) then _KzYY(_8PA0, _Sy7m) end end) _8PA0.oldcamerazoomin = TheCamera.ZoomIn _8PA0.oldcamerazoomout = TheCamera.ZoomOut TheCamera.ZoomIn = function() end TheCamera.ZoomOut = function() end _8PA0.oldonrightclick = _CF5q.components.playercontroller.OnRightClick _CF5q.components.playercontroller.OnRightClick = function() end if _CF5q.components.playeractionpicker then _8PA0.oldrightclick = _CF5q.components.playeractionpicker.GetRightClickActions _CF5q.components.playeractionpicker.GetRightClickActions = _aObP end _8PA0.OnRemoveEntity = _UHfh return _8PA0 end local function _VX6n(_scvp) _scvp:DoTaskInTime(FRAMES, function() if _scvp.dyc_noplacerpostinit then return end _scvp.entity:AddLabel() _scvp.Label:SetFont(NUMBERFONT) _scvp.Label:SetFontSize(0x16) _scvp.Label:SetColour(0x1, 0x1, 0x1) _scvp.Label:SetText( " " ) _scvp.Label:Enable(true) local _22S7 = ThePlayer local function _38hp(_KAlm) _fEil(_KAlm, _Gcvk(0x4 + SuperWall.wallBuilderHeightAdjustment, 0x1, 0x4)) local _31LA = (SuperWall.wallBuilderHeightAdjustment > 0x0 and "+" ) or "" _KAlm.Label:SetText(TUNING.DYC_SUPERWALL_STRINGS.singlewallbuild.."\n"..TUNING.DYC_SUPERWALL_STRINGS.heightadjustment..":".._31LA..SuperWall.wallBuilderHeightAdjustment.."\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  " ) end local function _gKGx(_Imkp) if SuperWall.wallBuilderHeightAdjustment < 0x3 then SuperWall.wallBuilderHeightAdjustment = SuperWall.wallBuilderHeightAdjustment + 0x1 end SuperWall.SetWallBuilderHeight(SuperWall.wallBuilderHeightAdjustment) _38hp(_Imkp) end local function _PByl(_xozq) if SuperWall.wallBuilderHeightAdjustment > - 0x3 then SuperWall.wallBuilderHeightAdjustment = SuperWall.wallBuilderHeightAdjustment - 0x1 end SuperWall.SetWallBuilderHeight(SuperWall.wallBuilderHeightAdjustment) _38hp(_xozq) end SuperWall.IncreaseWallSetHeight = function() _gKGx(_scvp) end SuperWall.DecreaseWallSetHeight = function() _PByl(_scvp) end _scvp.dycwallplacertask = _scvp:DoPeriodicTask(FRAMES, function() if TheSim:GetMouseButtonState(MOUSEBUTTON_RIGHT) then if _scvp.dycisrightmouseup then local _AHRw = _22S7 local _JuDR = TheInput:GetWorldPosition() local _7RhP = TheInput:GetWorldEntityUnderMouse() local _Or84 = TheInput:GetHUDEntityUnderMouse() if _Or84 == nil and _AHRw and _AHRw.replica.inventory and _AHRw.replica.inventory:GetActiveItem() then local _mFgS = _AHRw.replica.inventory:GetActiveItem() if _DlYB(_mFgS, _JuDR) and _7RhP == nil then SuperWall.BuildWall(_JuDR.x, _JuDR.z) else _AHRw.replica.inventory:ReturnActiveItem() end end end _scvp.dycisrightmouseup = false else _scvp.dycisrightmouseup = true end end) _scvp.oldonrightclick = _22S7.components.playercontroller.OnRightClick _22S7.components.playercontroller.OnRightClick = function() end _scvp.OnRemoveEntity = function(_F8QP) _22S7.components.playercontroller.OnRightClick = _F8QP.oldonrightclick if _F8QP.dycwallplacertask then _F8QP.dycwallplacertask:Cancel() end SuperWall.IncreaseWallSetHeight = nil SuperWall.DecreaseWallSetHeight = nil end _38hp(_scvp) end) end local _SDsB = { "dyc_wall_moonrock" , "dyc_wall_moonrock_item" , "dyc_wall_ruin" , "dyc_wall_ruin_item" , "dyc_wall_stone" , "dyc_wall_stone_item" , "dyc_wall_hay" , "dyc_wall_hay_item" , "dyc_wall_wood" , "dyc_wall_wood_item" , "dyc_door_moonrock" , "dyc_door_moonrock_item" , "dyc_door_ruin" , "dyc_door_ruin_item" , "dyc_door_stone" , "dyc_door_stone_item" , "dyc_door_hay" , "dyc_door_hay_item" , "dyc_door_wood" , "dyc_door_wood_item" , } for _K51w, _b4Vv in pairs(_SDsB) do local _kp1W = _b4Vv:gsub( "dyc_" , "" ):gsub( "ruin" , "ruins" ):gsub( "door" , "wall" ) PREFAB_SKINS[_b4Vv] = PREFAB_SKINS[_kp1W] PREFAB_SKINS_IDS[_b4Vv] = PREFAB_SKINS_IDS[_kp1W] end return Prefab( "common/dyc_wallbuilderitemchild" , _bVMs, _GAQr, _p9pS), Prefab( "common/dyc_wallbuilderitem" , _pDnl, _GAQr, _p9pS), Prefab( "common/dyc_wallbuilderitem_placersquare" , _UXjX, _GAQr, _p9pS), Prefab( "common/dyc_wallbuilderitem_placer" , _JbjE, _GAQr, _p9pS), _yRaU( "hedge_block" , false), _yRaU( "hedge_block" , true), _yRaU( "hedge_cone" , false), _yRaU( "hedge_cone" , true), _yRaU( "hedge_layered" , false), _yRaU( "hedge_layered" , true), _yRaU( "pigruin" , false), _yRaU( "pigruin" , true), _Gmox( "hedge_block" , false), _Gmox( "hedge_block" , true), _Gmox( "hedge_cone" , false), _Gmox( "hedge_cone" , true), _Gmox( "hedge_layered" , false), _Gmox( "hedge_layered" , true), _Gmox( "pigruin" , false), _Gmox( "pigruin" , true), MakePlacer( "common/dyc_wall_hedge_block_item_placer" , "dyc_hedge" , "dyc_hedge_block" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_hedge_cone_item_placer" , "dyc_hedge" , "dyc_hedge_cone" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_hedge_layered_item_placer" , "dyc_hedge" , "dyc_hedge_layered" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_pigruin_item_placer" , "wall" , "dyc_wall_pig_ruins" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_hedge_block_item_placer" , "dyc_hedge" , "dyc_hedge_block" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_hedge_cone_item_placer" , "dyc_hedge" , "dyc_hedge_cone" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_hedge_layered_item_placer" , "dyc_hedge" , "dyc_hedge_layered" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_pigruin_item_placer" , "wall" , "dyc_wall_pig_ruins" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), _yRaU( "hay" , false), _yRaU( "hay" , true), _yRaU( "wood" , false), _yRaU( "wood" , true), _yRaU( "stone" , false), _yRaU( "stone" , true), _yRaU( "ruin" , false), _yRaU( "ruin" , true), _yRaU( "limestone" , false), _yRaU( "limestone" , true), _yRaU( "moonrock" , false), _yRaU( "moonrock" , true), _yRaU( "ice" , false), _yRaU( "ice" , true), _yRaU( "sea" , false), _yRaU( "sea" , true), _Gmox( "hay" , false), _Gmox( "hay" , true), _Gmox( "wood" , false), _Gmox( "wood" , true), _Gmox( "stone" , false), _Gmox( "stone" , true), _Gmox( "ruin" , false), _Gmox( "ruin" , true), _Gmox( "limestone" , false), _Gmox( "limestone" , true), _Gmox( "moonrock" , false), _Gmox( "moonrock" , true), _Gmox( "ice" , false), _Gmox( "ice" , true), _Gmox( "sea" , false), _Gmox( "sea" , true), MakePlacer( "common/dyc_wall_sea_item_placer" , "wall" , "dyc_wall_sea" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_ice_item_placer" , "wall" , "dyc_wall_ice" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_moonrock_item_placer" , "wall" , "wall_moonrock" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_limestone_item_placer" , "wall" , "dyc_wall_limestone" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_ruin_item_placer" , "wall" , "wall_ruins" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_stone_item_placer" , "wall" , "wall_stone" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_hay_item_placer" , "wall" , "wall_hay" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_wall_wood_item_placer" , "wall" , "wall_wood" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_sea_item_placer" , "wall" , "dyc_wall_sea" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_ice_item_placer" , "wall" , "dyc_wall_ice" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_moonrock_item_placer" , "wall" , "wall_moonrock" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_limestone_item_placer" , "wall" , "dyc_wall_limestone" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_ruin_item_placer" , "wall" , "wall_ruins" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_stone_item_placer" , "wall" , "wall_stone" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_hay_item_placer" , "wall" , "wall_hay" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n), MakePlacer( "common/dyc_door_wood_item_placer" , "wall" , "wall_wood" , "fullA" , false, false, true, nil, nil, "eight" , _VX6n) 