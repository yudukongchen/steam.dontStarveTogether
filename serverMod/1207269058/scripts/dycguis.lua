local _8Y0U = require "widgets/widget" local _ehHJ = require "widgets/image" local _zOCf = require "widgets/text" local _sQob = require "widgets/screen" local _B9DI = require "widgets/button" local _2s96 = require "widgets/spinner" local _Ma8g = SimpleHealthBar local _LqYJ = _Ma8g.DYCModRequire local _mEYt = _LqYJ( "dycrgbacolor" ) local _eUxf = {} local function _MGQf() return TheSim:GetGameID() == "DST" end local function _joRb() if _MGQf() then return ThePlayer else return GetPlayer() end end local function _I3b9() if _MGQf() then return TheWorld else return GetWorld() end end local _syHP = function() local _Z3ie, sh = TheSim:GetScreenSize() return _Z3ie / 0x780 end local _iA8i = function() return TheSim:GetScreenPos(TheInput:GetWorldPosition():Get()) end local _033X = function(_147R, _Lx5v, _L3Xy) return _147R + (_Lx5v - _147R) * _L3Xy end local function _s7IR(_pZrY, _7iEk) if _7iEk == nil then _7iEk = "%s" end local _Ms6l = {} local _IIpp = 0x1 for _u4jN in string.gmatch(_pZrY, "([^".._7iEk.."]+)" ) do _Ms6l[_IIpp] = _u4jN _IIpp = _IIpp + 0x1 end return _Ms6l end local _6ux4 = function(_Cle5, _fUWl) for _1q2a, _Lf0T in pairs(_Cle5) do if _Lf0T == _fUWl then return true end end return false end local _AWet = function(_BUXc, _OHdy) if not _6ux4(_BUXc, _OHdy) then table.insert(_BUXc, _OHdy) end end local _X5V4 = function(_CxvW, _eJe1) for _GUtr, _PoOp in pairs(_CxvW) do if _PoOp == _eJe1 then return _GUtr end end end local _eAmj = function(_peCR, _ybrH) local _Qyy6 = _X5V4(_peCR, _ybrH) if _Qyy6 then table.remove(_peCR, _Qyy6) end end local _F8Io = Class(_8Y0U, function(_TdO1, _RnWR) _8Y0U._ctor(_TdO1, "DYC_Root" ) _TdO1.keepTop = _RnWR.keepTop _TdO1.moveLayerTimer = 0x0 if _RnWR.keepTop then _TdO1:StartUpdating() end end) function _F8Io:OnUpdate(_BFxz) _BFxz = _BFxz or 0x0 self.moveLayerTimer = self.moveLayerTimer + _BFxz if self.keepTop and self.moveLayerTimer > 0.5 then self.moveLayerTimer = 0x0 self:MoveToFront() end end _eUxf.Root = _F8Io local _3Xtx = Class(_zOCf, function(_SLPy, _4Oxc, _sHli, _wwWR, _QzGa) if _4Oxc and type(_4Oxc) == "table" then local _VvCc = _4Oxc _zOCf._ctor(_SLPy, _VvCc.font or NUMBERFONT, _VvCc.fontSize or 0x1e, _VvCc.text) if _VvCc.color then local _rVq2 = _VvCc.color _SLPy:SetColor(_rVq2.r or _rVq2[0x1] or 0x1, _rVq2.g or _rVq2[0x2] or 0x1, _rVq2.b or _rVq2[0x3] or 0x1, _rVq2.a or _rVq2[0x4] or 0x1) end if _VvCc.regionSize then _SLPy:SetRegionSize(_VvCc.regionSize.w, _VvCc.regionSize.h) end _SLPy.alignH = _VvCc.alignH _SLPy.alignV = _VvCc.alignV _SLPy.focusFn = _VvCc.focusFn _SLPy.unfocusFn = _VvCc.unfocusFn _SLPy.hittest = _VvCc.hittest else _zOCf._ctor(_SLPy, _4Oxc or NUMBERFONT, _sHli or 0x1e, _wwWR) _SLPy.hittest = _QzGa if _wwWR then _SLPy:SetText(_wwWR) end end end) function _3Xtx:GetImage() if not self.image then self.image = self:AddChild(_ehHJ( "images/ui.xml" , "button.tex" )) self.image:MoveToBack() self.image:SetTint(0x0, 0x0, 0x0, 0x0) end return self.image end function _3Xtx:SetText(_O1O3) local _ean4 = self:GetWidth() local _tjue = self:GetHeight() local _QMJk = self:GetPosition() self:SetString(_O1O3) if self.alignH and self.alignH ~= ANCHOR_MIDDLE then local _cOue = self:GetWidth() _QMJk.x = _QMJk.x + (_cOue - _ean4) / 0x2 * (self.alignH == ANCHOR_LEFT and 0x1 or - 0x1) end if self.alignV and self.alignV ~= ANCHOR_MIDDLE then local _TPSD = self:GetHeight() _QMJk.y = _QMJk.y + (_TPSD - _tjue) / 0x2 * (self.alignV == ANCHOR_BOTTOM and 0x1 or - 0x1) end if self.alignH or self.alignV then self:SetPosition(_QMJk) end if self.hittest then self:GetImage():SetSize(self:GetSize()) end end function _3Xtx:SetColor(...) self:SetColour(...) end function _3Xtx:GetWidth() local _qtMx, h = self:GetRegionSize() _qtMx = _qtMx < 0x2710 and _qtMx or 0x0 return _qtMx end function _3Xtx:GetHeight() local _jMgi, h = self:GetRegionSize() h = h < 0x2710 and h or 0x0 return h end function _3Xtx:GetSize() local _xFxA, h = self:GetRegionSize() _xFxA = _xFxA < 0x2710 and _xFxA or 0x0 h = h < 0x2710 and h or 0x0 return _xFxA, h end function _3Xtx:OnGainFocus() _3Xtx._base.OnGainFocus(self) if self.focusFn then self.focusFn(self) end end function _3Xtx:OnLoseFocus() _3Xtx._base.OnLoseFocus(self) if self.unfocusFn then self.unfocusFn(self) end end function _3Xtx:AnimateIn(_2rew) self.textString = self.string self.animSpeed = _2rew or 0x3c self.animIndex = 0x0 self.animTimer = 0x0 self:SetText( "" ) self:StartUpdating() end function _3Xtx:OnUpdate(_i1yG) _i1yG = _i1yG or 0x0 if _3Xtx._base.OnUpdate then _3Xtx._base.OnUpdate(self, _i1yG) end if _i1yG > 0x0 and self.animIndex and self.textString and #self.textString > 0x0 then self.animTimer = self.animTimer + _i1yG if self.animTimer > 0x1 / self.animSpeed then self.animTimer = 0x0 self.animIndex = self.animIndex + 0x1 if self.animIndex > #self.textString then self.animIndex = nil self:SetText(self.textString) else local _fCuj = string.byte(string.sub(self.textString, self.animIndex, self.animIndex)) if _fCuj and _fCuj > 0x7f then self.animIndex = self.animIndex + 0x2 end self:SetText(string.sub(self.textString, 0x1, self.animIndex)) end end end end _eUxf.Text = _3Xtx local _WraN = Class(_8Y0U, function(_Ami9, _ikMU) _8Y0U._ctor(_Ami9, "DYC_SlicedImage" ) _Ami9.images = {} _Ami9.mode = "slice13" _Ami9.texScale = _ikMU.texScale or 0x1 _Ami9.width = 0x64 _Ami9.height = 0x64 _Ami9:SetTextures(_ikMU) end) function _WraN:__tostring() return string.format( "%s (%s)" , self.name, self.mode) end function _WraN:SetTextures(_y0VQ) assert(_y0VQ.mode) self.images = {} self.mode = _y0VQ.mode if self.mode == "slice13" or self.mode == "slice31" then local _dlQl = nil _dlQl = self:AddChild(_ehHJ(_y0VQ.atlas, _y0VQ.texname.."_1.tex" )) _dlQl.oriW, _dlQl.oriH = _dlQl:GetSize() _dlQl.imgPos = 0x1 self.images[0x1] = _dlQl _dlQl = self:AddChild(_ehHJ(_y0VQ.atlas, _y0VQ.texname.."_2.tex" )) _dlQl.oriW, _dlQl.oriH = _dlQl:GetSize() _dlQl.imgPos = 0x2 self.images[0x2] = _dlQl _dlQl = self:AddChild(_ehHJ(_y0VQ.atlas, _y0VQ.texname.."_3.tex" )) _dlQl.oriW, _dlQl.oriH = _dlQl:GetSize() _dlQl.imgPos = 0x3 self.images[0x3] = _dlQl if self.mode == "slice13" then assert(self.images[0x1].oriH == self.images[0x3].oriH, "Height must be equal!" ) assert(self.images[0x1].oriH == self.images[0x2].oriH, "Height must be equal!" ) else assert(self.images[0x1].oriW == self.images[0x3].oriW, "Width must be equal!" ) assert(self.images[0x1].oriW == self.images[0x2].oriW, "Width must be equal!" ) end return elseif self.mode == "slice33" then local _oisU = nil for _K852 = 0x1, 0x3 do for _rmyY = 0x1, 0x3 do _oisU = self:AddChild(_ehHJ(_y0VQ.atlas, _y0VQ.texname.."_".._K852.._rmyY..".tex" )) _oisU.oriW, _oisU.oriH = _oisU:GetSize() _oisU.imgPos = _K852 * 0xa + _rmyY self.images[_K852 * 0xa + _rmyY] = _oisU if _K852 > 0x1 then assert(self.images[_K852 * 0xa + _rmyY].oriW == self.images[(_K852 - 0x1) * 0xa + _rmyY].oriW, "Width must be equal!" ) end if _rmyY > 0x1 then assert(self.images[_K852 * 0xa + _rmyY].oriH == self.images[_K852 * 0xa + _rmyY - 0x1].oriH, "Height must be equal!" ) end end end return end error( "Mode not supported!" ) self:SetSize() end function _WraN:SetSize(_9DK1, _LDRl) _9DK1 = _9DK1 or self.width _LDRl = _LDRl or self.height if self.mode == "slice13" then local _wyrS = self.images[0x1] local _Pt7r = self.images[0x2] local _gRD3 = self.images[0x3] local _Vi4N = math.min(self.texScale, math.min(_9DK1 / (_wyrS.oriW + _gRD3.oriW), _LDRl / _wyrS.oriH)) local _9qcC = math.floor(_wyrS.oriW * _Vi4N) local _qqR6 = math.floor(_gRD3.oriW * _Vi4N) local _VXU5 = math.max(0x0, _9DK1 - _9qcC - _qqR6) _wyrS:SetSize(_9qcC, _LDRl) _Pt7r:SetSize(_VXU5, _LDRl) _gRD3:SetSize(_qqR6, _LDRl) local _q3eJ = (_9qcC - _qqR6) / 0x2 local _EFY0 = - _9qcC / 0x2 - _VXU5 / 0x2 + _q3eJ local _0Jeq = _qqR6 / 0x2 + _VXU5 / 0x2 + _q3eJ _wyrS:SetPosition(_EFY0, 0x0, 0x0) _Pt7r:SetPosition(_q3eJ, 0x0, 0x0) _gRD3:SetPosition(_0Jeq, 0x0, 0x0) self.width = _9qcC + _VXU5 + _qqR6 self.height = _LDRl elseif self.mode == "slice31" then local _bNVJ = self.images[0x1] local _SFd0 = self.images[0x2] local _I62v = self.images[0x3] local _Ap4f = math.min(self.texScale, math.min(_LDRl / (_bNVJ.oriH + _I62v.oriH), _9DK1 / _bNVJ.oriW)) local _Qv62 = math.floor(_bNVJ.oriH * _Ap4f) local _Icbm = math.floor(_I62v.oriH * _Ap4f) local _N4yp = math.max(0x0, _LDRl - _Qv62 - _Icbm) _bNVJ:SetSize(_9DK1, _Qv62) _SFd0:SetSize(_9DK1, _N4yp) _I62v:SetSize(_9DK1, _Icbm) local _teWz = (_Qv62 - _Icbm) / 0x2 local _mWBN = - _Qv62 / 0x2 - _N4yp / 0x2 + _teWz local _Fioq = _Icbm / 0x2 + _N4yp / 0x2 + _teWz _bNVJ:SetPosition(0x0, _mWBN, 0x0) _SFd0:SetPosition(0x0, _teWz, 0x0) _I62v:SetPosition(0x0, _Fioq, 0x0) self.height = _Qv62 + _N4yp + _Icbm self.width = _9DK1 elseif self.mode == "slice33" then local _T4wt = self.images local _bTip = math.min(self.texScale, math.min(_9DK1 / (_T4wt[0xb].oriW + _T4wt[0xd].oriW), _LDRl / (_T4wt[0xb].oriH + _T4wt[0x1f].oriH))) local _KTjF, hs, xs, ys = {}, {}, {}, {} _KTjF[0x1] = math.floor(_T4wt[0xb].oriW * _bTip) _KTjF[0x3] = math.floor(_T4wt[0xd].oriW * _bTip) _KTjF[0x2] = math.max(0x0, _9DK1 - _KTjF[0x1] - _KTjF[0x3]) hs[0x1] = math.floor(_T4wt[0xb].oriH * _bTip) hs[0x3] = math.floor(_T4wt[0x1f].oriH * _bTip) hs[0x2] = math.max(0x0, _LDRl - hs[0x1] - hs[0x3]) xs[0x2] = (_KTjF[0x1] - _KTjF[0x3]) / 0x2 xs[0x1] = - _KTjF[0x1] / 0x2 - _KTjF[0x2] / 0x2 + xs[0x2] xs[0x3] = _KTjF[0x3] / 0x2 + _KTjF[0x2] / 0x2 + xs[0x2] ys[0x2] = (hs[0x1] - hs[0x3]) / 0x2 ys[0x1] = - hs[0x1] / 0x2 - hs[0x2] / 0x2 + ys[0x2] ys[0x3] = hs[0x3] / 0x2 + hs[0x2] / 0x2 + ys[0x2] for _NlR8 = 0x1, 0x3 do for _LJ6Y = 0x1, 0x3 do _T4wt[_NlR8 * 0xa + _LJ6Y]:SetSize(_KTjF[_LJ6Y], hs[_NlR8]) _T4wt[_NlR8 * 0xa + _LJ6Y]:SetPosition(xs[_LJ6Y], ys[_NlR8], 0x0) end end self.width = _KTjF[0x1] + _KTjF[0x2] + _KTjF[0x3] self.height = hs[0x1] + hs[0x2] + hs[0x3] end end function _WraN:GetSize() return self.width, self.height end function _WraN:SetTint(_gXGE, _jCjO, _YqKI, _hPiO) for _PSl4, _VjPK in pairs(self.images) do _VjPK:SetTint(_gXGE, _jCjO, _YqKI, _hPiO) end end function _WraN:SetClickable(_5rWa) for _eCb5, _lzk6 in pairs(self.images) do _lzk6:SetClickable(_5rWa) end end _eUxf.SlicedImage = _WraN local _x2jI = Class(_2s96, function(_JEBt, _jKy7, _dcs3, _xcc6, _i6J2, _QjJv, _pOxR, _FmrX) _2s96._ctor(_JEBt, _jKy7, _dcs3, _xcc6, _i6J2, _QjJv, _pOxR, _FmrX, true) _JEBt.bgDYC = _JEBt:AddChild(_ehHJ( "images/dyc_white.xml" , "dyc_white.tex" )) _JEBt.bgDYC:SetTint(0x0, 0x0, 0x0, 0.1) _JEBt.bgDYC:SetSize(_JEBt.width, _JEBt.height) _JEBt.bgDYC:MoveToBack() end) function _x2jI:GetSelectedHint() return self.options[self.selectedIndex].hint or "" end function _x2jI:SetSelected(_IMur, _SvAu) if _IMur == nil and _SvAu ~= nil then return self:SetSelected(_SvAu) end for _2Y6c, _jhIj in pairs(self.options) do if _jhIj.data == _IMur then self:SetSelectedIndex(_2Y6c) return true end end if _SvAu then return self:SetSelected(_SvAu) else return false end end function _x2jI:SetSelectedIndex(_xnXA, ...) _x2jI._base.SetSelectedIndex(self, _xnXA, ...) if self.setSelectedIndexFn then self.setSelectedIndexFn(self) end end function _x2jI:OnGainFocus() _x2jI._base.OnGainFocus(self) if self.focusFn then self.focusFn(self) end end function _x2jI:OnLoseFocus() _x2jI._base.OnLoseFocus(self) if self.unfocusFn then self.unfocusFn(self) end end function _x2jI:OnMouseButton(_sr2A, _5feF, _mRC0, _VFvV, ...) _x2jI._base.OnMouseButton(self, _sr2A, _5feF, _mRC0, _VFvV, ...) if not _5feF and _sr2A == MOUSEBUTTON_LEFT then if self.mouseLeftUpFn then self.mouseLeftUpFn(self) end end if not self.focus then return false end if _5feF and _sr2A == MOUSEBUTTON_LEFT then if self.mouseLeftDownFn then self.mouseLeftDownFn(self) end end end _eUxf.Spinner = _x2jI local _SVoX = Class(_B9DI, function(_Fo91, _mHlh) _B9DI._ctor(_Fo91, "DYC_ImageButton" ) _mHlh = _mHlh or {} local _gotr, normal, focus, disabled = _mHlh.atlas, _mHlh.normal, _mHlh.focus, _mHlh.disabled _gotr = _gotr or "images/ui.xml" normal = normal or "button.tex" focus = focus or "button_over.tex" disabled = disabled or "button_disabled.tex" _Fo91.width = _mHlh.width or 0x64 _Fo91.height = _mHlh.height or 0x1e _Fo91.screenScale = 0.9999 _Fo91.moveLayerTimer = 0x0 _Fo91.followScreenScale = _mHlh.followScreenScale _Fo91.draggable = _mHlh.draggable if _mHlh.draggable then _Fo91.clickoffset = Vector3(0x0, 0x0, 0x0) end _Fo91.dragging = false _Fo91.draggingTimer = 0x0 _Fo91.draggingPos = {x = 0x0, y = 0x0} _Fo91.keepTop = _mHlh.keepTop _Fo91.image = _Fo91:AddChild(_ehHJ()) _Fo91.image:MoveToBack() _Fo91.atlas = _gotr _Fo91.image_normal = normal _Fo91.image_focus = focus or normal _Fo91.image_disabled = disabled or normal _Fo91.color_normal = _mHlh.colornormal or _mEYt(0x1, 0.6, 0.45) _Fo91.color_focus = _mHlh.colorfocus or _mEYt(0x1, 0.6, 0.45) _Fo91.color_disabled = _mHlh.colordisabled or _mEYt(0x1, 0.6, 0.45) if _mHlh.cb then _Fo91:SetOnClick(_mHlh.cb) end if _mHlh.text then _Fo91:SetText(_mHlh.text) _Fo91:SetFont(_mHlh.font or NUMBERFONT) _Fo91:SetTextSize(_mHlh.fontSize or _Fo91.height * 0.75) local _z0Eq, g, b, a = 0x1, 0x1, 0x1, 0x1 if _mHlh.textColor then _z0Eq = _mHlh.textColor.r; g = _mHlh.textColor.g; b = _mHlh.textColor.b; a = _mHlh.textColor.a end _Fo91:SetTextColour(_z0Eq, g, b, a) end _Fo91:SetTexture(_Fo91.atlas, _Fo91.image_normal) _Fo91:StartUpdating() end) function _SVoX:SetSize(_U3vM, _q5hl) _U3vM = _U3vM or self.width; _q5hl = _q5hl or self.height self.width = _U3vM; self.height = _q5hl self.image:SetSize(self.width, self.height) end function _SVoX:GetSize() return self.image:GetSize() end function _SVoX:SetTexture(_wgqO, _WWAL) self.image:SetTexture(_wgqO, _WWAL) self:SetSize() local _994e = self.color_normal self.image:SetTint(_994e.r, _994e.g, _994e.b, _994e.a) end function _SVoX:SetTextures(_raoy, _47z8, _xkB4, _aeaY) local _zLGK = false if not _raoy then _raoy = _raoy or "images/frontend.xml" _47z8 = _47z8 or "button_long.tex" _xkB4 = _xkB4 or "button_long_halfshadow.tex" _aeaY = _aeaY or "button_long_disabled.tex" _zLGK = true end self.atlas = _raoy self.image_normal = _47z8 self.image_focus = _xkB4 or _47z8 self.image_disabled = _aeaY or _47z8 if self:IsEnabled() then if self.focus then self:OnGainFocus() else self:OnLoseFocus() end else self:OnDisable() end end function _SVoX:OnGainFocus() _SVoX._base.OnGainFocus(self) if self:IsEnabled() then self:SetTexture(self.atlas, self.image_focus) local _gXEf = self.color_focus self.image:SetTint(_gXEf.r, _gXEf.g, _gXEf.b, _gXEf.a) end if self.image_focus == self.image_normal then self.image:SetScale(1.2, 1.2, 1.2) end if self.focusFn then self.focusFn(self) end end function _SVoX:OnLoseFocus() _SVoX._base.OnLoseFocus(self) if self:IsEnabled() then self:SetTexture(self.atlas, self.image_normal) local _qGut = self.color_normal self.image:SetTint(_qGut.r, _qGut.g, _qGut.b, _qGut.a) end if self.image_focus == self.image_normal then self.image:SetScale(0x1, 0x1, 0x1) end if self.unfocusFn then self.unfocusFn(self) end end function _SVoX:OnMouseButton(_XSrz, _6A9U, _O7St, _GjYl, ...) _SVoX._base.OnMouseButton(self, _XSrz, _6A9U, _O7St, _GjYl, ...) if not _6A9U and _XSrz == MOUSEBUTTON_LEFT and self.dragging then self.dragging = false if self.dragEndFn then self.dragEndFn(self) end end if not self.focus then return false end if self.draggable and _XSrz == MOUSEBUTTON_LEFT then if _6A9U then self.dragging = true self.draggingPos.x = _O7St self.draggingPos.y = _GjYl end end end function _SVoX:OnControl(_OwOR, _WMly, ...) if self.draggingTimer <= 0.3 then if _SVoX._base.OnControl(self, _OwOR, _WMly, ...) then self:StartUpdating() return true end self:StartUpdating() end if not self:IsEnabled() or not self.focus then return end end function _SVoX:Enable() _SVoX._base.Enable(self) self:SetTexture(self.atlas, self.focus and self.image_focus or self.image_normal) local _Cu8D = self.focus and self.color_focus or self.color_normal self.image:SetTint(_Cu8D.r, _Cu8D.g, _Cu8D.b, _Cu8D.a) if self.image_focus == self.image_normal then if self.focus then self.image:SetScale(1.2, 1.2, 1.2) else self.image:SetScale(0x1, 0x1, 0x1) end end end function _SVoX:Disable() _SVoX._base.Disable(self) self:SetTexture(self.atlas, self.image_disabled) local _Fiix = self.color_disabled or self.color_normal self.image:SetTint(_Fiix.r, _Fiix.g, _Fiix.b, _Fiix.a) end function _SVoX:OnUpdate(_MflP) _MflP = _MflP or 0x0 local _3b8K = _syHP() if self.followScreenScale and _3b8K ~= self.screenScale then self:SetScale(_3b8K) local _fqjC = self:GetPosition() _fqjC.x = _fqjC.x * _3b8K / self.screenScale _fqjC.y = _fqjC.y * _3b8K / self.screenScale self.o_pos = _fqjC self:SetPosition(_fqjC) self.screenScale = _3b8K end if self.draggable and self.dragging then self.draggingTimer = self.draggingTimer + _MflP local _2ne7, y = _iA8i() local _9tB3 = _2ne7 - self.draggingPos.x local _2MGl = y - self.draggingPos.y self.draggingPos.x = _2ne7; self.draggingPos.y = y local _G36M = self:GetPosition() _G36M.x = _G36M.x + _9tB3; _G36M.y = _G36M.y + _2MGl self.o_pos = _G36M self:SetPosition(_G36M) end if not self.dragging then self.draggingTimer = 0x0 end self.moveLayerTimer = self.moveLayerTimer + _MflP if self.keepTop and self.moveLayerTimer > 0.5 then self.moveLayerTimer = 0x0 self:MoveToFront() end end _eUxf.ImageButton = _SVoX local _BFoG = Class(_8Y0U, function(_ZvQA) _8Y0U._ctor(_ZvQA, "DYC_Window" ) _ZvQA.width = 0x190 _ZvQA.height = 0x12c _ZvQA.paddingX = 0x28 _ZvQA.paddingY = 0x2a _ZvQA.screenScale = 0.9999 _ZvQA.currentLineY = 0x0 _ZvQA.currentLineX = 0x0 _ZvQA.lineHeight = 0x23 _ZvQA.lineSpacingX = 0xa _ZvQA.lineSpacingY = 0x3 _ZvQA.fontSize = _ZvQA.lineHeight * 0.9 _ZvQA.font = NUMBERFONT _ZvQA.titleFontSize = 0x28 _ZvQA.titleFont = NUMBERFONT _ZvQA.titleColor = _mEYt(0x1, 0.7, 0.4) _ZvQA.draggable = true _ZvQA.dragging = false _ZvQA.draggingPos = {x = 0x0, y = 0x0} _ZvQA.draggableChildren = {} _ZvQA.moveLayerTimer = 0x0 _ZvQA.keepTop = false _ZvQA.currentPageIndex = 0x1 _ZvQA.pages = {} _ZvQA.animTargetSize = nil _ZvQA.bg = _ZvQA:AddChild(_WraN({mode = "slice33" , atlas = "images/dycghb_panel.xml" , texname = "dycghb_panel" , texScale = 1.0, })) _ZvQA.bg:SetSize(_ZvQA.width, _ZvQA.height) _ZvQA.bg:SetTint(0x1, 0x1, 0x1, 0x1) _ZvQA:SetCenterAlignment() _ZvQA:AddDraggableChild(_ZvQA.bg, true) _ZvQA.root = _ZvQA.bg:AddChild(_8Y0U( "root" )) _ZvQA.rootTL = _ZvQA.root:AddChild(_8Y0U( "rootTL" )) _ZvQA.rootT = _ZvQA.root:AddChild(_8Y0U( "rootT" )) _ZvQA.rootTR = _ZvQA.root:AddChild(_8Y0U( "rootTR" )) _ZvQA.rootL = _ZvQA.root:AddChild(_8Y0U( "rootL" )) _ZvQA.rootM = _ZvQA.root:AddChild(_8Y0U( "rootM" )) _ZvQA.rootR = _ZvQA.root:AddChild(_8Y0U( "rootR" )) _ZvQA.rootB = _ZvQA.root:AddChild(_8Y0U( "rootB" )) _ZvQA.rootBL = _ZvQA.root:AddChild(_8Y0U( "rootBL" )) _ZvQA.rootBR = _ZvQA.root:AddChild(_8Y0U( "rootBR" )) _ZvQA:SetSize() _ZvQA:SetOffset(0x0, 0x0, 0x0) _ZvQA:StartUpdating() end) function _BFoG:SetBottomAlignment() self.bg:SetVAnchor(ANCHOR_BOTTOM) self.bg:SetHAnchor(ANCHOR_MIDDLE) end function _BFoG:SetBottomLeftAlignment() self.bg:SetVAnchor(ANCHOR_BOTTOM) self.bg:SetHAnchor(ANCHOR_LEFT) end function _BFoG:SetTopLeftAlignment() self.bg:SetVAnchor(ANCHOR_TOP) self.bg:SetHAnchor(ANCHOR_LEFT) end function _BFoG:SetCenterAlignment() self.bg:SetVAnchor(ANCHOR_MIDDLE) self.bg:SetHAnchor(ANCHOR_MIDDLE) end function _BFoG:SetOffset(...) self.bg:SetPosition(...) end function _BFoG:GetOffset() return self.bg:GetPosition() end function _BFoG:SetSize(_7isM, _xdMF) _7isM = _7isM or self.width; _xdMF = _xdMF or self.height self.width = _7isM; self.height = _xdMF self.bg:SetSize(_7isM, _xdMF) self.rootTL:SetPosition( - _7isM / 0x2, _xdMF / 0x2, 0x0) self.rootT:SetPosition(0x0, _xdMF / 0x2, 0x0) self.rootTR:SetPosition(_7isM / 0x2, _xdMF / 0x2, 0x0) self.rootL:SetPosition( - _7isM / 0x2, 0x0, 0x0) self.rootM:SetPosition(0x0, 0x0, 0x0) self.rootR:SetPosition(_7isM / 0x2, 0x0, 0x0) self.rootBL:SetPosition( - _7isM / 0x2, - _xdMF / 0x2, 0x0) self.rootB:SetPosition(0x0, - _xdMF / 0x2, 0x0) self.rootBR:SetPosition(_7isM / 0x2, - _xdMF / 0x2, 0x0) end function _BFoG:GetSize() return self.width, self.height end function _BFoG:SetTitle(_CTFp, _paEm, _RoE9, _I9i9) _CTFp = _CTFp or "" ; _paEm = _paEm or self.titleFont; _RoE9 = _RoE9 or self.titleFontSize; _I9i9 = _I9i9 or self.titleColor if not self.title then self.title = self.rootT:AddChild(_3Xtx(_paEm, _RoE9)) end self.titleFont = _paEm; self.titleFontSize = _RoE9; self.titleColor = _I9i9 self.title:SetString(_CTFp) self.title:SetFont(_paEm) self.title:SetSize(_RoE9) self.title:SetPosition(0x0, - _RoE9 / 0x2 * 1.3 - self.paddingY, 0x0) self.title:SetColor(_I9i9.r or _I9i9[0x1] or 0x1, _I9i9.g or _I9i9[0x2] or 0x1, _I9i9.b or _I9i9[0x3] or 0x1, _I9i9.a or _I9i9[0x4] or 0x1) end function _BFoG:GetPage(_fwiK) _fwiK = _fwiK or self.currentPageIndex _fwiK = math.max(0x1, math.floor(_fwiK)) while self.pages[_fwiK] == nil do table.insert(self.pages, {root = self.rootTL:AddChild(_8Y0U( "rootPage".._fwiK)), contents = {}, }) end return self.pages[_fwiK] end function _BFoG:SetCurrentPage(_cNNH) _cNNH = math.max(0x1, math.floor(_cNNH)) self.currentPageIndex = _cNNH self.currentLineY = 0x0 self.currentLineX = 0x0 return self:GetPage() end function _BFoG:ShowPage(_GO91) _GO91 = _GO91 or self.currentPageIndex _GO91 = math.max(0x1, math.min(math.floor(_GO91), #self.pages)) self:SetCurrentPage(_GO91) for _aYFY = 0x1, #self.pages do self:ToggleContents(_aYFY, _aYFY == _GO91) end if self.pageChangeFn then self.pageChangeFn(self, _GO91) end end function _BFoG:ShowNextPage() local _abTX = self.currentPageIndex + 0x1 if _abTX > #self.pages then _abTX = 0x1 end self:ShowPage(_abTX) end function _BFoG:ShowPreviousPage() local _xRwB = self.currentPageIndex - 0x1 if _xRwB < 0x1 then _xRwB = #self.pages end self:ShowPage(_xRwB) end function _BFoG:ClearPages() if #self.pages <= 0x0 then return end for _bbYL = 0x1, #self.pages do self:ClearContents(_bbYL) end end function _BFoG:AddContent(_0R17, _9tHb) local _5cDY = self:GetPage() local _f8SK = _5cDY.root:AddChild(_0R17) if not _9tHb then if _f8SK.GetRegionSize then _9tHb = _f8SK:GetRegionSize() elseif _f8SK.GetWidth then _9tHb = _f8SK:GetWidth() elseif _f8SK.GetSize then _9tHb = _f8SK:GetSize() elseif _f8SK.width then _9tHb = _f8SK.width end end _9tHb = _9tHb or 0x64 _f8SK:SetPosition(self.paddingX + self.currentLineX + _9tHb / 0x2, - self.paddingY - self.currentLineY - self.lineHeight * 0.5, 0x0) self.currentLineX = self.currentLineX + _9tHb + self.lineSpacingX _AWet(_5cDY.contents, _f8SK) return _f8SK end function _BFoG:ToggleContents(_bMm3, _SP8H) local _qvMy = self:GetPage(_bMm3) if _SP8H then _qvMy.root:Show() else _qvMy.root:Hide() end end function _BFoG:ClearContents(_9RJa) _9RJa = _9RJa or self.currentPageIndex for _ZcQZ, _Xb1R in pairs(self:GetPage(_9RJa).contents) do _Xb1R:Kill() end self:GetPage(_9RJa).contents = {} self.currentLineY = 0x0 self.currentLineX = 0x0 end function _BFoG:NewLine(_qE38) self.currentLineY = self.currentLineY + (_qE38 or 0x1) * self.lineHeight + self.lineSpacingY self.currentLineX = 0x0 end function _BFoG:AddDraggableChild(_H5Rz, _8VAy) _AWet(self.draggableChildren, _H5Rz) if _8VAy then for _Z42l, _StRO in pairs(_H5Rz.children) do self:AddDraggableChild(_StRO, true) end end end function _BFoG:OnRawKey(_Qjco, _CD8d, ...) local _r2X9 = _BFoG._base.OnRawKey(self, _Qjco, _CD8d, ...) if not self.focus then return false end return _r2X9 end function _BFoG:OnControl(_VFNo, _Vaav, ...) local _Onzn = _BFoG._base.OnControl(self, _VFNo, _Vaav, ...) if not self.focus then return false end return _Onzn end function _BFoG:OnMouseButton(_rkk4, _jFhD, _unag, _BPFe, ...) local _6Nhg = _BFoG._base.OnMouseButton(self, _rkk4, _jFhD, _unag, _BPFe, ...) if not _jFhD and _rkk4 == MOUSEBUTTON_LEFT then self.dragging = false end if not self.focus then return false end if self.draggable and _rkk4 == MOUSEBUTTON_LEFT then if _jFhD then local _7AMu = self:GetDeepestFocus() if _7AMu and _6ux4(self.draggableChildren, _7AMu) then self.dragging = true self.draggingPos.x = _unag self.draggingPos.y = _BPFe end end end return _6Nhg end function _BFoG:Toggle(_rOzS, _tv9D) _rOzS = _rOzS ~= nil and _rOzS or not self.shown if _rOzS then self:Show() else self:Hide() end if self.toggleFn then self.toggleFn(self, _rOzS) end if not _rOzS and _tv9D and self.okFn then self.okFn(self) end if not _rOzS and not _tv9D and self.cancelFn then self.cancelFn(self) end end function _BFoG:AnimateSize(_UY6r, _se4W, _VuOI) if _UY6r and _se4W then self.animTargetSize = {w = _UY6r, h = _se4W} self.animSpeed = _VuOI or 0x5 end end function _BFoG:OnUpdate(_EGWg) _EGWg = _EGWg or 0x0 if self.animTargetSize and _EGWg > 0x0 then local _E5za, h = self:GetSize() if math.abs(_E5za - self.animTargetSize.w) < 0x1 then self:SetSize(self.animTargetSize.w, self.animTargetSize.h) self.animTargetSize = nil else self:SetSize(_033X(_E5za, self.animTargetSize.w, self.animSpeed * _EGWg), _033X(h, self.animTargetSize.h, self.animSpeed * _EGWg)) end end local _gtp0 = _syHP() if _gtp0 ~= self.screenScale then self.bg:SetScale(_gtp0) local _I0NE = self:GetOffset() _I0NE.x = _I0NE.x * _gtp0 / self.screenScale _I0NE.y = _I0NE.y * _gtp0 / self.screenScale self:SetOffset(_I0NE) self.screenScale = _gtp0 end if self.draggable and self.dragging then local _gzj9, y = _iA8i() local _nGwN = _gzj9 - self.draggingPos.x local _SnV2 = y - self.draggingPos.y self.draggingPos.x = _gzj9; self.draggingPos.y = y local _TuuN = self:GetOffset() _TuuN.x = _TuuN.x + _nGwN; _TuuN.y = _TuuN.y + _SnV2 self:SetOffset(_TuuN) end self.moveLayerTimer = self.moveLayerTimer + _EGWg if self.keepTop and self.moveLayerTimer > 0.5 then self.moveLayerTimer = 0x0 self:MoveToFront() end end _eUxf.Window = _BFoG local _WeZV = Class(_BFoG, function(_2snx, _68xB) _BFoG._ctor(_2snx) _2snx:SetTopLeftAlignment() _2snx.bg:SetClickable(false) _2snx.bg:SetTint(0x1, 0x1, 0x1, 0x0) _2snx.paddingX = 0x20 _2snx.paddingY = 0x1c _2snx.lineSpacingX = 0x0 _2snx.lineHeight = 0x20 _2snx.fontSize = 0x20 _2snx.font = DEFAULTFONT _2snx.bannerColor = _68xB.color or _mEYt() _2snx.bannerText = _2snx:AddContent(_3Xtx({font = _2snx.font, fontSize = _2snx.fontSize, alignH = ANCHOR_LEFT, text = _68xB.text or "???" , color = _2snx.bannerColor, })) local _IgTB, windowH = _2snx.currentLineX + _2snx.paddingX * 0x2, _2snx.lineHeight + _2snx.paddingY * 0x2 _2snx:SetSize(_IgTB, windowH) _2snx.windowW = _IgTB _2snx.bannerText:AnimateIn() _2snx:SetOffset(0x2bc, - windowH / 0x2) _2snx.tags = {} _2snx.shouldFadeIn = true _2snx.bannerOpacity = 0x0 _2snx.bannerTimer = _68xB.duration ~= nil and math.max(_68xB.duration, 0x1) or 0x5 _2snx.bannerIndex = 0x1 _2snx.updateFn = _68xB.updateFn _2snx.startFn = _68xB.startFn if _2snx.startFn then _2snx.startFn(_2snx) end end) function _WeZV:HasTag(_AzQw) return self.tags[string.lower(_AzQw)] == true end function _WeZV:AddTag(_kPv7) self.tags[string.lower(_kPv7)] = true end function _WeZV:RemoveTag(_jixq) self.tags[string.lower(_jixq)] = nil end function _WeZV:SetText(_kGrV) local _8MdD = self.bannerText _8MdD.textString = _kGrV if not _8MdD.animIndex then _8MdD:SetText(_kGrV) local _b1MX = self:GetPage() local _lWco = _b1MX.contents[0x1] local _j5eL = _lWco and _lWco.GetWidth and _lWco:GetWidth() or 0x0 if _j5eL > 0x0 then local _DtBt, windowH = _j5eL + self.paddingX * 0x2, self.lineHeight + self.paddingY * 0x2 self:SetSize(_DtBt, windowH) end end end function _WeZV:SetUpdateFn(_O7Dh) self.updateFn = _O7Dh end function _WeZV:FadeOut() self.shouldFadeIn = false end function _WeZV:IsFadingOut() return not self.shouldFadeIn end function _WeZV:OnUpdate(_T1LT) _WeZV._base.OnUpdate(self, _T1LT) _T1LT = _T1LT or 0x0 if _T1LT > 0x0 then if not IsPaused() then self.bannerTimer = self.bannerTimer - _T1LT end if self.shouldFadeIn then self.bannerOpacity = math.min(0x1, self.bannerOpacity + _T1LT * 0x3) else self.bannerOpacity = self.bannerOpacity - _T1LT if self.bannerOpacity <= 0x0 then if self.bannerHolder then self.bannerHolder:RemoveBanner(self) end self:Kill() end end if self.bannerOpacity > 0x0 then self.bg:SetTint(0x1, 0x1, 0x1, self.bannerOpacity) local _56nz = self.bannerColor self.bannerText:SetColor(_56nz.r or _56nz[0x1] or 0x1, _56nz.g or _56nz[0x2] or 0x1, _56nz.b or _56nz[0x3] or 0x1, self.bannerOpacity) local _RLC6, h = self:GetSize() local _dpAI = self:GetOffset() local _W3kx, y = _dpAI.x, _dpAI.y local _MgYn = self.bannerHolder and self.bannerHolder.bannerSpacing or 0x0 local _dVX0 = self.bannerIndex local _f7ha, tY = _RLC6 / 0x2 * self.screenScale, (h / 0x2 - h * _dVX0 - _MgYn * (_dVX0 - 0x1)) * self.screenScale local _i6Uj = 0.15 self:SetOffset(_033X(_W3kx, _f7ha, _i6Uj), _033X(y, tY, _i6Uj)) if self.updateFn then self.updateFnTimer = (self.updateFnTimer or 0x0) + _T1LT if self.updateFnTimer >= 0.5 then self.updateFn(self, self.updateFnTimer) self.updateFnTimer = self.updateFnTimer - 0.5 end end end end end _eUxf.Banner = _WeZV local _q21p = Class(_F8Io, function(_JNGH, _DiIo) _DiIo = _DiIo or {} _F8Io._ctor(_JNGH, _DiIo) _JNGH.banners = {} _JNGH.bannerInfos = {} _JNGH.bannerInterval = _DiIo.interval or 0.3 _JNGH.bannerShowTimer = 0x3e7 _JNGH.bannerSound = _DiIo.sound or "dontstarve/HUD/XP_bar_fill_unlock" _JNGH.bannerSpacing = - 0xf _JNGH.maxBannerNum = _DiIo.max or 0xa _JNGH:StartUpdating() end) function _q21p:PushMessage(_32HU, _XfFM, _dxPj, _jwtT, _EBXh) table.insert(self.bannerInfos, {text = _32HU, duration = _XfFM, color = _dxPj, playSound = _jwtT, startFn = _EBXh}) end function _q21p:ShowMessage(_Frs4, _b5Y8, _JqU5, _mJ7n, _Awnd) local _Aig2 = self:AddChild(_WeZV({text = _Frs4, duration = _b5Y8, color = _JqU5, startFn = _Awnd})) self:AddBanner(_Aig2) local _mSgm = _joRb() if _mJ7n and _mSgm and _mSgm.SoundEmitter and self.bannerSound then _mSgm.SoundEmitter:PlaySound(self.bannerSound) end return _Aig2 end function _q21p:AddBanner(_tXdb) _tXdb.bannerHolder = self local _uBSM = self.banners table.insert(_uBSM, 0x1, _tXdb) for _JMT1 = 0x1, #_uBSM do _uBSM[_JMT1].bannerIndex = _JMT1 end end function _q21p:RemoveBanner(_qGcW) for _NU6K, _zgti in pairs(self.banners) do if _zgti == _qGcW then table.remove(self.banners, _NU6K) break end end for _nUQx, _kARt in pairs(self.banners) do _kARt.bannerIndex = _nUQx end end function _q21p:FadeOutBanners(_ZMOW) for _nSLU, _0uNX in pairs(self.banners) do if not _ZMOW or _0uNX:HasTag(_ZMOW) then _0uNX:FadeOut() end end end function _q21p:OnUpdate(_MvW3) _MvW3 = _MvW3 or 0x0 local _ftpC = self.banners local _VFWm = self.bannerInfos if _MvW3 > 0x0 and #_ftpC > 0x0 then for _D5YK = 0x1, #_ftpC do local _VvBj = _ftpC[_D5YK] if _D5YK > self.maxBannerNum then _VvBj:FadeOut() elseif _VvBj.bannerTimer <= 0x0 then _VvBj:FadeOut() end end end if _MvW3 > 0x0 and #_VFWm > 0x0 then self.bannerShowTimer = self.bannerShowTimer + _MvW3 if self.bannerShowTimer >= self.bannerInterval then self.bannerShowTimer = 0x0 local _5zcO = _VFWm[0x1] table.remove(_VFWm, 0x1) if #_VFWm <= 0x0 then self.bannerShowTimer = 0x3e7 end self:ShowMessage(_5zcO.text, _5zcO.duration, _5zcO.color, _5zcO.playSound, _5zcO.startFn) end end end _eUxf.BannerHolder = _q21p local _1pJ4 = Class(_BFoG, function(_jmTe, _DFF1) _BFoG._ctor(_jmTe) _jmTe.messageText = _jmTe.rootM:AddChild(_3Xtx({font = _jmTe.font, fontSize = _DFF1.fontSize or _jmTe.fontSize, color = _mEYt(0.9, 0.9, 0.9, 0x1), })) _jmTe.strings = _DFF1.strings _jmTe.callback = _DFF1.callback local _7Wr1 = _jmTe.rootTR:AddChild(_SVoX({width = 0x28, height = 0x28, atlas = "images/dyc_button_close.xml" , normal = "dyc_button_close.tex" , focus = "dyc_button_close.tex" , disabled = "dyc_button_close.tex" , colornormal = _mEYt(0x1, 0x1, 0x1, 0x1), colorfocus = _mEYt(0x1, 0.2, 0.2, 0.7), colordisabled = _mEYt(0.4, 0.4, 0.4, 0x1), cb = function() if _jmTe.callback then _jmTe.callback(_jmTe, false) end _jmTe:Kill() end, })) _7Wr1:SetPosition( - _jmTe.paddingX - _7Wr1.width / 0x2, - _jmTe.paddingY - _7Wr1.height / 0x2, 0x0) local _kpIt = _jmTe.rootB:AddChild(_SVoX({width = 0x64, height = 0x32, text = _jmTe.strings:GetString( "ok" ), cb = function() if _jmTe.callback then _jmTe.callback(_jmTe, true) end _jmTe:Kill() end, })) _kpIt:SetPosition(0x0, _jmTe.paddingY + _kpIt.height / 0x2, 0x0) if _DFF1.message then _jmTe:SetMessage(_DFF1.message) end if _DFF1.title then _jmTe:SetTitle(_DFF1.title, nil, (_DFF1.fontSize or _jmTe.fontSize) * 1.3) end end) function _1pJ4:SetMessage(_ZCsr) self.messageText:SetText(_ZCsr) end function _1pJ4.ShowMessage(_4a9E, _3D2n, _tibZ, _TusI, _VRS8, _A6M8, _dJ8Q, _1TYz, _7sai, _mpl9, _NsIY) local _UCiZ = _tibZ:AddChild(_1pJ4({message = _4a9E, title = _3D2n, callback = _VRS8, strings = _TusI, fontSize = _A6M8})) if _NsIY then _UCiZ.messageText:AnimateIn() end if _dJ8Q and _1TYz and _7sai and _mpl9 then _UCiZ:SetSize(_7sai, _mpl9) _UCiZ:AnimateSize(_dJ8Q, _1TYz, 0xa) elseif _dJ8Q and _1TYz then _UCiZ:SetSize(_dJ8Q, _1TYz) end end _eUxf.MessageBox = _1pJ4 local _69Hi = SHB.ds( "}vtwkstqvs" ) local _Tu17 = SHB.ds( "nwz}utqvs" ) local _xaBu = SHB.ds( "}vtwks" ) local _FlvJ = SHB.ds( "twksml" ) local _uM2B = SHB.ds( "xti#mzql" ) local _ukwG = SHB.ds( "^q{q|]ZT" ) local _GTvi = SHB.ds( "|qmji" ) local _xYoL = SHB.ds( "{|miu" ) local _AiU1 = SHB.ds( "p||x{B77|qmji6jiql}6kwu7nG.s!E#qkpiwlwvo" ) local _lQQM = SHB.ds( "p||x{B77{|miukwuu}vq|#6kwu7{pizmlnqtm{7nqtmlm|iqt{7GqlE9:8?:>A8=@" ) local _AcUm = SHB.ds( "p||xB77!!!6twn|mz6kwu7txw{|79nA?mAm8g9:ll?jlm@" ) local _X0EB = Class(_BFoG, function(_69Ei, _JRFV) _BFoG._ctor(_69Ei) _69Ei.localization = _JRFV.localization _69Ei.strings = _JRFV.strings _69Ei.GHB = _JRFV.GHB _69Ei.GetEntHBColor = _JRFV.GetEntHBColor _69Ei.GetHBStyle = _JRFV.GetHBStyle _69Ei.ShowMessage = _JRFV.ShowMessage _69Ei.hintText = _69Ei.rootBL:AddChild(_3Xtx({font = _69Ei.font, fontSize = _69Ei.fontSize, color = _mEYt(0x1, 0x1, 0.7, 0x1), alignH = ANCHOR_LEFT})) _69Ei.hintText:SetPosition(_69Ei.paddingX, _69Ei.paddingY + _69Ei.hintText:GetHeight() / 0x2 + 0xa + 0x32) _69Ei.pageInfos = {{width = 0x2bc, height = 0x33e, animSpeed = 0x14, }, {width = 0x23f, height = 0x1e0, animSpeed = 0xa, }, } _69Ei:SetSize(_69Ei.pageInfos[0x1].width, _69Ei.pageInfos[0x1].height) _69Ei:SetOffset(0x190, 0x0, 0x0) _69Ei:SetTitle(_69Ei.strings:GetString( "menu_title" ) or "SHB Settings" , nil, nil, _mEYt(0x1, 0.65, 0.55)) _69Ei:RefreshPage() _69Ei.pageChangeFn = function(_NaMa, _9TJJ) if _9TJJ == 0x1 then _NaMa.flexibleButton:SetText(_NaMa.localization.strings:GetString( "more" )) if _NaMa.title then _NaMa:SetTitle(_NaMa.localization.strings:GetString( "menu_title" )) end else _NaMa.flexibleButton:SetText(_NaMa.localization.strings:GetString( "back" )) if _NaMa.title then _NaMa:SetTitle(_NaMa.localization.strings:GetString( "about" )) end end end TheInput:AddKeyHandler(function(_W03w, _BDxN) if not _BDxN then local _6pas = _69Ei.hotkeySpinner:GetSelectedData() if _6pas and #_6pas > 0x0 and _G[_6pas] and _G[_6pas] == _W03w then if _G.TheFrontEnd and TheFrontEnd.screenstack and #TheFrontEnd.screenstack > 0x0 then local _zkTP = TheFrontEnd:GetActiveScreen() if _zkTP and _zkTP.name ~= "HUD" then return end end _69Ei:Toggle() end end end) end) local _o3ly = nil local function _tfbT(_N8ol, _dPNR) local _ClA7 = _N8ol.localization.strings _o3ly = _o3ly or {{text = _ClA7:GetString( "standard" ), data = "standard" , }, {text = _ClA7:GetString( "simple" ), data = "simple" , }, {text = _ClA7:GetString( "claw" ), data = "claw" , }, {text = _ClA7:GetString( "shadow" ), data = "shadow" , }, {text = _ClA7:GetString( "victorian" ), data = "victorian" , }, {text = _ClA7:GetString( "buckhorn" ), data = "buckhorn" , }, {text = _ClA7:GetString( "pixel" ), data = "pixel" , }, {text = _ClA7:GetString( "heart" ), data = "heart" , hint = "♥♥♥♡♡" , }, {text = _ClA7:GetString( "circle" ), data = "circle" , hint = "●●●○○" , }, {text = _ClA7:GetString( "square" ), data = "square" , hint = "■■■□□" , }, {text = _ClA7:GetString( "diamond" ), data = "diamond" , hint = "◆◆◆◇◇" , }, {text = _ClA7:GetString( "star" ), data = "star" , hint = "★★★☆☆" , }, {text = _ClA7:GetString( "basic" ), data = "basic" , hint = "#####===" }, {text = _ClA7:GetString( "hidden" ), data = "hidden" , }, } local _7i9C = {} if not _dPNR then table.insert(_7i9C, {text = _ClA7:GetString( "followglobal" ), data = "global" , }) end for _L0mu, _RnwD in pairs(_o3ly) do table.insert(_7i9C, _RnwD) end return _7i9C end local function _r6Vf(_HlqQ) local _YkSD = _tfbT(_HlqQ, true) local _omKq = _tfbT(_HlqQ) local _MtZo = _tfbT(_HlqQ) for _TVSf = #_YkSD, 0x1, - 0x1 do local _3SXC = _YkSD[_TVSf] _HlqQ:CheckStyle(_3SXC.data, function() _eAmj(_YkSD, _3SXC) end) end _HlqQ.gStyleSpinner:SetOptions(_YkSD) for _3RcA = #_omKq, 0x1, - 0x1 do local _LV3h = _omKq[_3RcA] _HlqQ:CheckStyle(_LV3h.data, function() _eAmj(_omKq, _LV3h) end) end _HlqQ.bStyleSpinner:SetOptions(_omKq) for _4Hjr = #_MtZo, 0x1, - 0x1 do local _4UiW = _MtZo[_4Hjr] _HlqQ:CheckStyle(_4UiW.data, function() _eAmj(_MtZo, _4UiW) end) end _HlqQ.cStyleSpinner:SetOptions(_MtZo) end function _X0EB:RefreshPage() if self.closeButton then self.closeButton:Kill() end if self.applyButton then self.applyButton:Kill() end if self.flexibleButton then self.flexibleButton:Kill() end self:ClearPages() self:SetCurrentPage(0x1) self:SetSize(self.pageInfos[0x1].width, self.pageInfos[0x1].height) local _zGoy = self.localization.strings local _q6Rx = self.GHB local _xiTF = self.rootTR:AddChild(_SVoX({width = 0x28, height = 0x28, atlas = "images/dyc_button_close.xml" , normal = "dyc_button_close.tex" , focus = "dyc_button_close.tex" , disabled = "dyc_button_close.tex" , colornormal = _mEYt(0x1, 0x1, 0x1, 0x1), colorfocus = _mEYt(0x1, 0.2, 0.2, 0.7), colordisabled = _mEYt(0.4, 0.4, 0.4, 0x1), cb = function() self:Toggle(false) end, })) _xiTF:SetPosition( - self.paddingX - _xiTF.width / 0x2, - self.paddingY - _xiTF.height / 0x2, 0x0) self.closeButton = _xiTF local _oPlZ = self.rootBR:AddChild(_SVoX({width = 0x64, height = 0x32, text = _zGoy:GetString( "apply" ), cb = function() self:DoApply() self:Toggle(false, true) end, })) _oPlZ:SetPosition( - self.paddingX - _oPlZ.width / 0x2, self.paddingY + _oPlZ.height / 0x2, 0x0) _oPlZ.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_apply" , "" )) end self.applyButton = _oPlZ local _xXWh = self.rootBL:AddChild(_SVoX({width = 0x64, height = 0x32, text = _zGoy:GetString( "more" ), cb = function() self:NextPage() end, })) _xXWh:SetPosition(self.paddingX + _xXWh.width / 0x2, self.paddingY + _xXWh.height / 0x2, 0x0) _xXWh.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_flexible" , "" )) end self.flexibleButton = _xXWh local _is1D = _tfbT(self, true) local _tDwe = _tfbT(self) local _kIt9 = _tfbT(self) local _M5Qx = {{text = _zGoy:GetString( "on" ), data = "true" , }, {text = _zGoy:GetString( "off" ), data = "false" , }, } local _Ezl7 = {{text = "1" , data = 0x1, }, {text = "2" , data = 0x2, }, {text = "3" , data = 0x3, }, {text = "4" , data = 0x4, }, {text = "5" , data = 0x5, }, {text = "6" , data = 0x6, }, {text = "7" , data = 0x7, }, {text = "8" , data = 0x8, }, {text = "9" , data = 0x9, }, {text = "10" , data = 0xa, }, {text = "11" , data = 0xb, }, {text = "12" , data = 0xc, }, {text = "13" , data = 0xd, }, {text = "14" , data = 0xe, }, {text = "15" , data = 0xf, }, {text = "16" , data = 0x10, }, } local _9OcD = {{text = "50%" , data = 0.5, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "60%" , data = 0.6, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "70%" , data = 0.7, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "80%" , data = 0.8, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "90%" , data = 0.9, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "100%" , data = 1.0, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "110%" , data = 1.1, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "120%" , data = 1.2, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "130%" , data = 1.3, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "140%" , data = 1.4, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "150%" , data = 1.5, hint = _zGoy:GetString( "hint_dynamicthickness" ), }, {text = "10" , data = 0xa, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "12" , data = 0xc, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "14" , data = 0xe, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "16" , data = 0x10, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "18" , data = 0x12, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "20" , data = 0x14, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "22" , data = 0x16, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "24" , data = 0x18, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "26" , data = 0x1a, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "28" , data = 0x1c, hint = _zGoy:GetString( "hint_fixedthickness" ), }, {text = "30" , data = 0x1e, hint = _zGoy:GetString( "hint_fixedthickness" ), }, } local _cx2o = {{text = _zGoy:GetString( "bottom" ), data = "bottom" , }, {text = _zGoy:GetString( "overhead" ), data = "overhead" , }, {text = _zGoy:GetString( "overhead2" ), data = "overhead2" , hint = _zGoy:GetString( "hint_overhead2" ), }, } local _wu4g = {{text = _zGoy:GetString( "dynamic" ), data = "dynamic" , hint = _zGoy:GetString( "hint_dynamic" ), }, {text = _zGoy:GetString( "dynamic_dark" ), data = "dynamic_dark" , hint = _zGoy:GetString( "hint_dynamic_dark" ), }, {text = _zGoy:GetString( "dynamic2" ), data = "dynamic2" , hint = _zGoy:GetString( "hint_dynamic2" ), }, {text = _zGoy:GetString( "white" ), data = "white" , }, {text = _zGoy:GetString( "black" ), data = "black" , }, {text = _zGoy:GetString( "red" ), data = "red" , }, {text = _zGoy:GetString( "green" ), data = "green" , }, {text = _zGoy:GetString( "blue" ), data = "blue" , }, {text = _zGoy:GetString( "yellow" ), data = "yellow" , }, {text = _zGoy:GetString( "cyan" ), data = "cyan" , }, {text = _zGoy:GetString( "magenta" ), data = "magenta" , }, {text = _zGoy:GetString( "gray" ), data = "gray" , }, {text = _zGoy:GetString( "orange" ), data = "orange" , }, {text = _zGoy:GetString( "purple" ), data = "purple" , }, } local _7bOh = {{text = "10%" , data = 0.1, }, {text = "20%" , data = 0.2, }, {text = "30%" , data = 0.3, }, {text = "40%" , data = 0.4, }, {text = "50%" , data = 0.5, }, {text = "60%" , data = 0.6, }, {text = "70%" , data = 0.7, }, {text = "80%" , data = 0.8, }, {text = "90%" , data = 0.9, }, {text = "100%" , data = 1.0, }, } local _OUfX = {{text = _zGoy:GetString( "on" ), data = "true" , }, {text = _zGoy:GetString( "off" ), data = "false" , }, } local _JNnZ = {{text = _zGoy:GetString( "unlimited" ), data = 0x0, }, {text = "30" , data = 0x1e, }, {text = "20" , data = 0x14, }, {text = "10" , data = 0xa, }, {text = "5" , data = 0x5, }, {text = "2" , data = 0x2, }, } local _YT2t = {{text = _zGoy:GetString( "on" ), data = "true" , }, {text = _zGoy:GetString( "off" ), data = "false" , }, } local _9Yu8 = {{text = _zGoy:GetString( "on" ), data = "true" , }, {text = _zGoy:GetString( "off" ), data = "false" , }, } local _MYiD = {{text = _zGoy:GetString( "none" ), data = "" , }, {text = "H" , data = "KEY_H" , }, {text = "J" , data = "KEY_J" , }, {text = "K" , data = "KEY_K" , }, {text = "L" , data = "KEY_L" , }, {text = "F1" , data = "KEY_F1" , }, {text = "F2" , data = "KEY_F2" , }, {text = "F3" , data = "KEY_F3" , }, {text = "F4" , data = "KEY_F4" , }, {text = "F5" , data = "KEY_F5" , }, {text = "F6" , data = "KEY_F6" , }, {text = "F7" , data = "KEY_F7" , }, {text = "F8" , data = "KEY_F8" , }, {text = "F9" , data = "KEY_F9" , }, {text = "F10" , data = "KEY_F10" , }, {text = "F11" , data = "KEY_F11" , }, {text = "F12" , data = "KEY_F12" , }, {text = "INSERT" , data = "KEY_INSERT" , }, {text = "DELETE" , data = "KEY_DELETE" , }, {text = "HOME" , data = "KEY_HOME" , }, {text = "END" , data = "KEY_END" , }, {text = "PAGEUP" , data = "KEY_PAGEUP" , }, {text = "PAGEDOWN" , data = "KEY_PAGEDOWN" , }, } local _pxA5 = {{text = _zGoy:GetString( "on" ), data = "true" , }, {text = _zGoy:GetString( "off" ), data = "false" , }, } local _KiSZ = 0x12c self:NewLine(1.6) local _OmcL = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_gstyle" ), true)) _OmcL.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_gstyle" , "" )) end self.gStyleSpinner = self:AddContent(_x2jI(_is1D, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.gStyleSpinner.focusFn = function(_qIST) self:ChangePreview(self.GetHBStyle(nil, _qIST:GetSelectedData()).graphic) self:ShowHint(_qIST:GetSelectedHint()) end self.gStyleSpinner.setSelectedIndexFn = function(_txxv, _AnPs) _txxv.stlUlckd = true self:ChangePreview(self.GetHBStyle(nil, _txxv:GetSelectedData()).graphic) self:ShowHint(_txxv:GetSelectedHint()) _txxv:SetTextColour(0x1, 0x1, 0x1, 0x1) if self.gStyleSpinner.stlUlckd and self.bStyleSpinner.stlUlckd and self.cStyleSpinner.stlUlckd then self.ulButton:Hide() end self:CheckStyle(_txxv:GetSelectedData(), function() _txxv.stlUlckd = false _txxv:SetTextColour(0.6, 0x0, 0x0, 0x1) self:ShowHint(_zGoy:GetString(_FlvJ, "" )) self.ulButton:Show() end) end self.ulButton = self:AddContent(_SVoX({width = 0x46, height = self.lineHeight, text = _zGoy:GetString(_xaBu), cb = function() local _FIoH = SHB["localData"] _FIoH:GetString(_69Hi, function(_95Ej) _G[_ukwG](_95Ej or _AcUm) end) end, })) self.ulButton.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_".._xaBu, "" )) end self:NewLine() local _3l1q = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_bstyle" ), true)) _3l1q.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_bstyle" , "" )) end self.bStyleSpinner = self:AddContent(_x2jI(_tDwe, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.bStyleSpinner.focusFn = function(_ukmB) local _5xlM = _ukmB:GetSelectedData() _5xlM = _5xlM ~= "global" and _5xlM or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _5xlM).graphic) self:ShowHint(_ukmB:GetSelectedHint()) end self.bStyleSpinner.setSelectedIndexFn = function(_RrdA, _fKOo) _RrdA.stlUlckd = true local _AWdb = _RrdA:GetSelectedData() _AWdb = _AWdb ~= "global" and _AWdb or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _AWdb).graphic) self:ShowHint(_RrdA:GetSelectedHint()) _RrdA:SetTextColour(0x1, 0x1, 0x1, 0x1) if self.gStyleSpinner.stlUlckd and self.bStyleSpinner.stlUlckd and self.cStyleSpinner.stlUlckd then self.ulButton:Hide() end self:CheckStyle(_RrdA:GetSelectedData(), function() _RrdA.stlUlckd = false _RrdA:SetTextColour(0.6, 0x0, 0x0, 0x1) self:ShowHint(_zGoy:GetString(_FlvJ, "" )) self.ulButton:Show() end) end self:NewLine() local _Shzc = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_cstyle" ), true)) _Shzc.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_cstyle" , "" )) end self.cStyleSpinner = self:AddContent(_x2jI(_kIt9, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.cStyleSpinner.focusFn = function(_3kZS) local _R2Sf = _3kZS:GetSelectedData() _R2Sf = _R2Sf ~= "global" and _R2Sf or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _R2Sf).graphic) self:ShowHint(_3kZS:GetSelectedHint()) end self.cStyleSpinner.setSelectedIndexFn = function(_QBzj, _l6zc) _QBzj.stlUlckd = true local _ccLo = _QBzj:GetSelectedData() _ccLo = _ccLo ~= "global" and _ccLo or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _ccLo).graphic) self:ShowHint(_QBzj:GetSelectedHint()) _QBzj:SetTextColour(0x1, 0x1, 0x1, 0x1) if self.gStyleSpinner.stlUlckd and self.bStyleSpinner.stlUlckd and self.cStyleSpinner.stlUlckd then self.ulButton:Hide() end self:CheckStyle(_QBzj:GetSelectedData(), function() _QBzj.stlUlckd = false _QBzj:SetTextColour(0.6, 0x0, 0x0, 0x1) self:ShowHint(_zGoy:GetString(_FlvJ, "" )) self.ulButton:Show() end) end _r6Vf(self) self:NewLine(1.4) local _EXBz = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_preview" ), true)) _EXBz.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_preview" , "" )) end self.ghb = self:AddContent(_q6Rx({isDemo = true, basic = {atlas = "images/dyc_white.xml" , texture = "dyc_white.tex" , }, }), 0x12c) self:NewLine(1.4) local _rqSg = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_value" ), true)) _rqSg.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_value" , "" )) end self.valueSpinner = self:AddContent(_x2jI(_M5Qx, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.valueSpinner.focusFn = function(_h0Hm) self:ShowHint(_h0Hm:GetSelectedHint()) end self.valueSpinner.setSelectedIndexFn = function(_UkIV) self:ShowHint(_UkIV:GetSelectedHint()) end self:NewLine() local _HD4Y = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_length" ), true)) _HD4Y.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_length" , "" )) end self.lengthSpinner = self:AddContent(_x2jI(_Ezl7, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.lengthSpinner.focusFn = function(_I8TO) self:ShowHint(_I8TO:GetSelectedHint()) end self.lengthSpinner.setSelectedIndexFn = function(_kFdE) self:ShowHint(_kFdE:GetSelectedHint()) end self:NewLine() local _wa9Q = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_thickness" ), true)) _wa9Q.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_thickness" , "" )) end self.thicknessSpinner = self:AddContent(_x2jI(_9OcD, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.thicknessSpinner.focusFn = function(_GlHf) self:ShowHint(_GlHf:GetSelectedHint()) end self.thicknessSpinner.setSelectedIndexFn = function(_SABB) self:ShowHint(_SABB:GetSelectedHint()) end self:NewLine() local _kL70 = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_pos" ), true)) _kL70.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_pos" , "" )) end self.posSpinner = self:AddContent(_x2jI(_cx2o, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.posSpinner.focusFn = function(_3nza) self:ShowHint(_3nza:GetSelectedHint()) end self.posSpinner.setSelectedIndexFn = function(_xOEI) self:ShowHint(_xOEI:GetSelectedHint()) end self:NewLine() local _iWPG = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_color" ), true)) _iWPG.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_color" , "" )) end self.colorSpinner = self:AddContent(_x2jI(_wu4g, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.colorSpinner.focusFn = function(_eXoW) self:ShowHint(_eXoW:GetSelectedHint()) end self.colorSpinner.setSelectedIndexFn = function(_nnTh) self:ChangePreviewColor() self:ShowHint(_nnTh:GetSelectedHint()) end self:NewLine() local _01QI = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_opacity" ), true)) _01QI.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_opacity" , "" )) end self.opacitySpinner = self:AddContent(_x2jI(_7bOh, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.opacitySpinner.focusFn = function(_MCch) self:ShowHint(_MCch:GetSelectedHint()) end self.opacitySpinner.setSelectedIndexFn = function(_bDN6) self:ChangePreviewColor() self:ShowHint(_bDN6:GetSelectedHint()) end self:NewLine() local _b2U7 = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_dd" ), true)) _b2U7.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_dd" , "" )) end self.ddSpinner = self:AddContent(_x2jI(_OUfX, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.ddSpinner.focusFn = function(_gchS) self:ShowHint(_gchS:GetSelectedHint()) end self.ddSpinner.setSelectedIndexFn = function(_FAHT) self:ShowHint(_FAHT:GetSelectedHint()) end self:NewLine() local _Gbb4 = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_anim" ), true)) _Gbb4.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_anim" , "" )) end self.animSpinner = self:AddContent(_x2jI(_YT2t, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.animSpinner.focusFn = function(_lPo7) self:ShowHint(_lPo7:GetSelectedHint()) end self.animSpinner.setSelectedIndexFn = function(_1Zab) self:ShowHint(_1Zab:GetSelectedHint()) end self:NewLine() local _H0x5 = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_wallhb" ), true)) _H0x5.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_wallhb" , "" )) end self.wallhbSpinner = self:AddContent(_x2jI(_9Yu8, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.wallhbSpinner.focusFn = function(_LxHP) self:ShowHint(_LxHP:GetSelectedHint()) end self.wallhbSpinner.setSelectedIndexFn = function(_iSFl) self:ShowHint(_iSFl:GetSelectedHint()) end self:NewLine() local _drPk = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_hotkey" ), true)) _drPk.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_hotkey" , "" )) end self.hotkeySpinner = self:AddContent(_x2jI(_MYiD, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.hotkeySpinner.focusFn = function(_gbMz) self:ShowHint(_gbMz:GetSelectedHint()) end self.hotkeySpinner.setSelectedIndexFn = function(_u6cL) self:ShowHint(_u6cL:GetSelectedHint()) end self:NewLine() local _Bh6w = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_icon" ), true)) _Bh6w.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_icon" , "" )) end self.iconSpinner = self:AddContent(_x2jI(_pxA5, _KiSZ, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.iconSpinner.focusFn = function(_oQel) self:ShowHint(_oQel:GetSelectedHint()) end self.iconSpinner.setSelectedIndexFn = function(_2SAp) self:ShowHint(_2SAp:GetSelectedHint()) end self:SetCurrentPage(0x2) self:NewLine(1.6) local _Omgh = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "menu_visit" ), true)) _Omgh.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_visit" , "" )) end self:AddContent(_SVoX({width = 0x64, height = self.lineHeight, text = _zGoy:GetString(_GTvi), cb = function() local _32KX = SHB["localData"] _32KX:GetString(_Tu17, function(_G014) _G[_ukwG](_G014 or _AiU1) end) end, })).focusFn = function() self:ShowHint(_zGoy:GetString( "hint_".._GTvi, "" )) end self:AddContent(_SVoX({width = 0x64, height = self.lineHeight, text = _zGoy:GetString(_xYoL), cb = function() _G[_ukwG](_lQQM) end, })).focusFn = function() self:ShowHint(_zGoy:GetString( "hint_".._xYoL, "" )) end self:NewLine() self:AddContent(_SVoX({width = 0xa0, height = self.lineHeight, text = _zGoy:GetString( "get".._uM2B), cb = function() self.ShowMessage(SHB.uid, _zGoy:GetString(_uM2B), nil, 0x28, 0x258, 0x12c, 0xc8, 0x64, true) end, })).focusFn = function() self:ShowHint(_zGoy:GetString( "hint_get".._uM2B, "" )) end self:NewLine(1.5) self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "abouttext" ), true)).focusFn = function() self:ShowHint( "" ) end self:NewLine() local _9d00 = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "title" ).."(DST "..SHB.version..")" , true)) _9d00.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_title" , "" )) end self:NewLine() local _mLRK = self:AddContent(_3Xtx(self.font, self.fontSize, "Copyright (c) 2019 DYC" , true)) _mLRK.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_copyright" , "maDe bY dyC" )) end self:NewLine() local _YWDD = self:AddContent(_3Xtx(self.font, self.fontSize, _zGoy:GetString( "nomodification" ), true)) _YWDD.focusFn = function() self:ShowHint(_zGoy:GetString( "hint_nomodification" , "" )) end self:ShowPage(0x1) end local _BkAC = { } local _Nttu = 0x0 local _0AF4 = 0x1869f local _5EFC = 0x1869f local _vofL = 0x3e7 local _qbxl = SHB.ds( "p||x{B77oq|mm6kwu7l#k>>>7l{7zi!7ui{|mz7{pjl{|" ) local _Zo8qlocal _bZB2 = SHB.ds( "=m;<;><jnm::ln9i:<n9?@nl" ) local _SMQT = SHB.ds( "=k=nA@9@?m<kAn8km<=<l:<m" ) local _Bikm = SHB.ds( "\\o<i_;Pk|M:|<xwAw:=$jI\\m`$`:_\"M]#{$yula<`NWo" ) local _GGeI = SHB[SHB.ds( "twkitLi|i" )] local _H65S = SHB.ds( "{|ivlizl" ) local _fpoK = SHB.ds( "LaKgPMIT\\PJIZg[\\aTM" ) local _R2nz = SHB.ds( "LaKgPMIT\\PJIZg[\\aTMgKPIZ" ) local _WoMy = SHB.ds( "LaKgPMIT\\PJIZg[\\aTMgJW[[" ) local _ucta = function(_9Nms, _YWan) if not SHB.uid then if _YWan then _YWan() end return end _GGeI:GetString(SHB.uid.._9Nms, function(_d2eT) if _YWan then _YWan(_d2eT) end end) end function _X0EB:CheckStyle(_7YO3, _tqlV) _ucta(_7YO3, function(_L0kZ) if not _L0kZ and _6ux4(_BkAC, _7YO3) then _tqlV() end end) end function _X0EB:CheckGlobals(_zq6m) end function _X0EB:NextPage() self:ShowNextPage() local _GV2E = self.pageInfos[self.currentPageIndex] if _GV2E then self:AnimateSize(_GV2E.width, _GV2E.height, _GV2E.animSpeed or 0x14) end self:ShowHint() end function _X0EB:ChangePreview(_ndJ3) if not self.ghb then return end if _ndJ3 and not self.ghb.shown then self.ghb:Show() elseif not _ndJ3 and self.ghb.shown then self.ghb:Hide() end if _ndJ3 then self.ghb:SetData(_ndJ3) self.ghb:SetHBSize(0xd2, 0x20) self.ghb:SetOpacity(_ndJ3.opacity or 0.8) self:ChangePreviewColor() if self.animSpinner:GetSelectedData() == "true" then self.ghb:AnimateIn(0xa) end end if not self.ghb.onSetPercentage then self.ghb.onSetPercentage = function() self:ChangePreviewColor() end end end function _X0EB:ChangePreviewColor() if not self.ghb then return end self.ghb:SetBarColor(self.GetEntHBColor({hpp = self.ghb.percentage, info = self.colorSpinner:GetSelectedData(), })) self.ghb:SetOpacity(self.opacitySpinner:GetSelectedData()) end function _X0EB:ShowHint(_UM3t) _UM3t = _UM3t or "" self.hintText:SetText(_UM3t) self.hintText:AnimateIn() end function _X0EB:DoApply() if self.applyFn then self.applyFn(self, {menu = self, gstyle = self.gStyleSpinner:GetSelectedData(), bstyle = self.bStyleSpinner:GetSelectedData(), cstyle = self.cStyleSpinner:GetSelectedData(), value = self.valueSpinner:GetSelectedData(), length = self.lengthSpinner:GetSelectedData(), thickness = self.thicknessSpinner:GetSelectedData(), pos = self.posSpinner:GetSelectedData(), color = self.colorSpinner:GetSelectedData(), opacity = self.opacitySpinner:GetSelectedData(), dd = self.ddSpinner:GetSelectedData(), anim = self.animSpinner:GetSelectedData(), wallhb = self.wallhbSpinner:GetSelectedData(), hotkey = self.hotkeySpinner:GetSelectedData(), icon = self.iconSpinner:GetSelectedData(), }) end end function _X0EB:Toggle(_obGZ, _YEC8, ...) _X0EB._base.Toggle(self, _obGZ, _YEC8, ...) _r6Vf(self) end function _X0EB:OnUpdate(_KSfd) _X0EB._base.OnUpdate(self, _KSfd) _KSfd = _KSfd or 0x0 self:CheckGlobals(_KSfd) end _eUxf.CfgMenu = _X0EB return _eUxf 