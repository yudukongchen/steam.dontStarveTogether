local _PiDe = {} local _N2H1 = function(_6IxE, _wOT7, _3Efj) assert(_3Efj >= _wOT7, "max needs to be larger than min!" ) return math.min(math.max(_6IxE, _wOT7), _3Efj) end _PiDe.Clamp = _N2H1 local _qM1r = function(_wLEO) return math.min(math.max(_wLEO, 0x0), 0x1) end _PiDe.Clamp01 = _qM1r local _eLPO = function(_5wk3) return math.floor(_5wk3 + 0.5) end _PiDe.Round = _eLPO local _GJ8g = function(_OXk6, _pjld, _vxFO) return(_pjld - _OXk6) * _vxFO + _OXk6 end _PiDe.Lerp = _GJ8g local _B5Fc = function(_qlRc) local _x2Wu = 0x0 for _3SJa, _D0Au in pairs(_qlRc) do _x2Wu = _x2Wu + 0x1 end return _x2Wu end _PiDe.TableCount = _B5Fc local _G8EC = function(_C4cn, _ABtR) for _gbma, _1iMu in pairs(_C4cn) do if _1iMu == _ABtR then return true end end return false end _PiDe.TableContains = _G8EC local _15TW = function(_aZdG, _JkJF) if not _G8EC(_aZdG, _JkJF) then table.insert(_aZdG, _JkJF) end end _PiDe.TableAdd = _15TW local _6kiD = function(_AcKv, _jEL6) for _Ifo2, _GIjv in pairs(_AcKv) do if _GIjv == _jEL6 then return _Ifo2 end end end _PiDe.TableGetIndex = _6kiD local _ngDK = function(_pSCM, _1GNp) local _1YU5 = _6kiD(_pSCM, _1GNp) if _1YU5 then table.remove(_pSCM, _1YU5) end end _PiDe.TableRemoveValue = _ngDK local function _3TKY(_Hqlw, _tXn4) if _Hqlw == nil or _tXn4 == nil then return false end return string.sub(_Hqlw, 0x1, #_tXn4) == _tXn4 end _PiDe.StringStartWith = _3TKY local function _Kk9b(_bnr0, _QHoR) if _QHoR == nil then _QHoR = "%s" end local _K7EM = {} local _0weT = 0x1 for _ut8X in string.gmatch(_bnr0, "([^".._QHoR.."]+)" ) do _K7EM[_0weT] = _ut8X _0weT = _0weT + 0x1 end return _K7EM end _PiDe.StrSpl = _Kk9b local _8uY6 = function() return {urlD = "http://dreamlo.com/lb/" , mode = "" , content = "" , data = {}, ReadAsync = function(_5gqB, _EHbQ, _GMnN, _G4pv) if _G4pv == nil then return end _5gqB:Clear() _5gqB.mode = "read" local _E2oJ = _5gqB.urlD.._EHbQ.."/pipe-get/".._G4pv TheSim:QueryServer(_E2oJ, function(_WIG7, _SEKr, _mmcR) if _SEKr and string.len(_WIG7) > 0x1 then _5gqB.content = _WIG7 if string.len(_WIG7) > 0x5 then local _zv5J = _Kk9b(_WIG7, "|" ) if #_zv5J > 0x5 then _5gqB.data[_zv5J[0x1]] = {} _5gqB.data[_zv5J[0x1]].text = _5gqB:D2T(_zv5J[0x4]) or "" _5gqB.data[_zv5J[0x1]].score = tonumber(_zv5J[0x2]) or 0x0 _5gqB.data[_zv5J[0x1]].seconds = tonumber(_zv5J[0x3]) or 0x0 _5gqB.data[_zv5J[0x1]].date = _zv5J[0x5] or "" _5gqB.data[_zv5J[0x1]].index = tonumber(_zv5J[0x6]) or 0x0 elseif #_zv5J == 0x5 then _5gqB.data[_zv5J[0x1]] = {} _5gqB.data[_zv5J[0x1]].text = "" _5gqB.data[_zv5J[0x1]].score = tonumber(_zv5J[0x2]) or 0x0 _5gqB.data[_zv5J[0x1]].seconds = tonumber(_zv5J[0x3]) or 0x0 _5gqB.data[_zv5J[0x1]].date = _zv5J[0x4] or "" _5gqB.data[_zv5J[0x1]].index = tonumber(_zv5J[0x5]) or 0x0 end end end if _GMnN then _GMnN(_5gqB, _SEKr) end end, "GET" ) end, ReadAllAsync = function(_rWnc, _6Xgo, _iAmA) _rWnc:Clear() _rWnc.mode = "read" local _dNsg = _rWnc.urlD.._6Xgo.."/pipe" TheSim:QueryServer(_dNsg, function(_fojw, _KsTa, _7TEu) if _KsTa and string.len(_fojw) > 0x1 then _fojw = string.gsub(_fojw, "\r" , "" ) _rWnc.content = _fojw local _JGol = _Kk9b(_fojw, "\n" ) if #_JGol < 0x1 then if _iAmA then _iAmA(_rWnc, _KsTa) end return end for _9PdS, _OmN9 in pairs(_JGol) do if string.len(_OmN9) > 0x5 then local _BsYs = _Kk9b(_OmN9, "|" ) if #_BsYs > 0x5 then _rWnc.data[_BsYs[0x1]] = {} _rWnc.data[_BsYs[0x1]].text = _rWnc:D2T(_BsYs[0x4]) or "" _rWnc.data[_BsYs[0x1]].score = tonumber(_BsYs[0x2]) or 0x0 _rWnc.data[_BsYs[0x1]].seconds = tonumber(_BsYs[0x3]) or 0x0 _rWnc.data[_BsYs[0x1]].date = _BsYs[0x5] or "" _rWnc.data[_BsYs[0x1]].index = tonumber(_BsYs[0x6]) or 0x0 elseif #_BsYs == 0x5 then _rWnc.data[_BsYs[0x1]] = {} _rWnc.data[_BsYs[0x1]].text = "" _rWnc.data[_BsYs[0x1]].score = tonumber(_BsYs[0x2]) or 0x0 _rWnc.data[_BsYs[0x1]].seconds = tonumber(_BsYs[0x3]) or 0x0 _rWnc.data[_BsYs[0x1]].date = _BsYs[0x4] or "" _rWnc.data[_BsYs[0x1]].index = tonumber(_BsYs[0x5]) or 0x0 end end end end if _iAmA then _iAmA(_rWnc, _KsTa) end end, "GET" ) end, WriteAsync = function(_rjoI, _36Ll, _mI99, _dnfm, _sWOM, _mbBy, _JJB3) if _dnfm == nil then return end _sWOM = _sWOM or 0x0 _mbBy = _mbBy or 0x0 _JJB3 = _JJB3 or "" _rjoI:Clear() _rjoI.mode = "write" local _Lj4r = _rjoI.urlD.._36Ll.."/add/".._dnfm.."/".._sWOM.."/".._mbBy.."/".._rjoI:T2D(_JJB3) TheSim:QueryServer(_Lj4r, function(_DASX, _F5AM, _4c9A) if _F5AM and string.len(_DASX) > 0x1 then _DASX = string.gsub(_DASX, "\r" , "" ) _rjoI.content = _DASX end if _mI99 then _mI99(_rjoI, _F5AM) end end, "GET" ) end, D2T = function(_PePB, _gARP) _gARP = _gARP or _PePB _gARP = string.gsub(_gARP, "%^c%$" , ":" ) _gARP = string.gsub(_gARP, "%^s%$" , "/" ) _gARP = string.gsub(_gARP, "%^q%$" , "%?" ) _gARP = string.gsub(_gARP, "%^e%$" , "=" ) _gARP = string.gsub(_gARP, "%^a%$" , "&" ) _gARP = string.gsub(_gARP, "%^p%$" , "%%" ) _gARP = string.gsub(_gARP, "%^m%$" , "%*" ) _gARP = string.gsub(_gARP, "%^v%$" , "|" ) _gARP = string.gsub(_gARP, "%^o%$" , "#" ) _gARP = string.gsub(_gARP, "%^s2%$" , "\\" ) _gARP = string.gsub(_gARP, "%^g%$" , ">" ) _gARP = string.gsub(_gARP, "%^l%$" , "<" ) _gARP = string.gsub(_gARP, "%^n%$" , "\r\n" ) _gARP = string.gsub(_gARP, "%^t%$" , "\t" ) return _gARP end, T2D = function(_Nmfq, _SZ9u) _SZ9u = _SZ9u or _Nmfq _SZ9u = string.gsub(_SZ9u, "\r" , "" ) _SZ9u = string.gsub(_SZ9u, ":" , "%^c%$" ) _SZ9u = string.gsub(_SZ9u, "/" , "%^s%$" ) _SZ9u = string.gsub(_SZ9u, "%?" , "%^q%$" ) _SZ9u = string.gsub(_SZ9u, "=" , "%^e%$" ) _SZ9u = string.gsub(_SZ9u, "&" , "%^a%$" ) _SZ9u = string.gsub(_SZ9u, "%%" , "%^p%$" ) _SZ9u = string.gsub(_SZ9u, "%*" , "%^m%$" ) _SZ9u = string.gsub(_SZ9u, "|" , "%^v%$" ) _SZ9u = string.gsub(_SZ9u, "#" , "%^o%$" ) _SZ9u = string.gsub(_SZ9u, "\\" , "%^s2%$" ) _SZ9u = string.gsub(_SZ9u, ">" , "%^g%$" ) _SZ9u = string.gsub(_SZ9u, "<" , "%^l%$" ) _SZ9u = string.gsub(_SZ9u, "\n" , "%^n%$" ) _SZ9u = string.gsub(_SZ9u, "\t" , "%^t%$" ) return _SZ9u end, IsResultOK = function(_FSKc) if _FSKc.mode == "write" then return _FSKc.content ~= nil and string.find(_FSKc.content, "OK" ) ~= nil else return _FSKc.content ~= nil and string.len(_FSKc.content) > 0x0 end end, Clear = function(_NRFM) _NRFM.content = "" _NRFM.data = {} _NRFM.mode = "" end, } end _PiDe.NewDrml = _8uY6 local _ErRw = function() return {content = "" , data = {}, Parse = function(_vcSj, _caSF) _vcSj:Clear() _caSF = string.gsub(_caSF, "\r" , "" ) _caSF = string.gsub(_caSF, ";" , "\n" ) _vcSj.content = _caSF local _49Wk = _Kk9b(_caSF, "\n" ) for _CpOr, _vCfP in pairs(_49Wk) do if string.len(_vCfP) > 0x2 then _vCfP = string.gsub(_vCfP, "\t" , "|" ) local _6ghm = _Kk9b(_vCfP, "|" ) if #_6ghm > 0x1 then _vcSj.data[_6ghm[0x1]] = {} _vcSj.data[_6ghm[0x1]].text = _6ghm[0x2] or "" if string.len(_6ghm[0x2]) > 0x1 then local _C6X8 = _Kk9b(_6ghm[0x2], "," ) if #_C6X8 > 0x0 then for _Jd6Z, _TuuL in pairs(_C6X8) do if string.len(_TuuL) > 0x2 then local _D5oS = _Kk9b(_TuuL, "-" ) if #_D5oS > 0x1 then _vcSj.data[_6ghm[0x1]][_D5oS[0x1 ]] = _D5oS[0x2] end end end end end end end end end, ReadAllAsync = function(_hEzF, _5zKy, _dnqc) _hEzF:Clear() local _mbAp = _5zKy TheSim:QueryServer(_mbAp, function(_4GRf, _nU50, _d7Bi) if _nU50 and string.len(_4GRf) > 0x1 then _hEzF:Parse(_4GRf) end if _dnqc then _dnqc(_hEzF, _nU50) end end, "GET" ) end, Clear = function(_5cYz) _5cYz.content = "" _5cYz.data = {} end, } end _PiDe.GTData = _ErRw local _nxIC = function() return {path = "mod_config_data/" , name = "dyc" , SetName = function(_QMqc, _wy4v) _QMqc.name = _wy4v end, SetString = function(_W4NR, _4eR7, _oiEx) TheSim:SetPersistentString(_W4NR.path.._W4NR.name.."_".._4eR7, _oiEx, ENCODE_SAVES, function(_IIC8, _8BDa) end) end, GetString = function(_z1YY, _C7Is, _pOTY) TheSim:GetPersistentString(_z1YY.path.._z1YY.name.."_".._C7Is, function(_ZKdi, _tTo0) if _pOTY then _pOTY(_ZKdi and _tTo0) end end) end, EraseString = function(_v0lf, _2l4h) TheSim:ErasePersistentString(_v0lf.path.._v0lf.name.."_".._2l4h, function(_kre4) end) end, } end _PiDe.LocalData = _nxIC return _PiDe 